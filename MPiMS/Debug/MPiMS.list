
MPiMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004230  08004230  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004238  08004238  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004238  08004238  00014238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000010  08004250  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08004250  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e3a8  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f0  00000000  00000000  0002e423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  00030918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000975  00000000  00000000  00031558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014f30  00000000  00000000  00031ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103a7  00000000  00000000  00046dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ef9c  00000000  00000000  000571a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b1c  00000000  00000000  000d6140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d8c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800414c 	.word	0x0800414c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800414c 	.word	0x0800414c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4699      	mov	r9, r3
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	469c      	mov	ip, r3
 8000452:	0413      	lsls	r3, r2, #16
 8000454:	4647      	mov	r7, r8
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	001d      	movs	r5, r3
 800045a:	000e      	movs	r6, r1
 800045c:	4661      	mov	r1, ip
 800045e:	0404      	lsls	r4, r0, #16
 8000460:	0c24      	lsrs	r4, r4, #16
 8000462:	b580      	push	{r7, lr}
 8000464:	0007      	movs	r7, r0
 8000466:	0c10      	lsrs	r0, r2, #16
 8000468:	434b      	muls	r3, r1
 800046a:	4365      	muls	r5, r4
 800046c:	4341      	muls	r1, r0
 800046e:	4360      	muls	r0, r4
 8000470:	0c2c      	lsrs	r4, r5, #16
 8000472:	18c0      	adds	r0, r0, r3
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4356      	muls	r6, r2
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	042d      	lsls	r5, r5, #16
 800048e:	0c2d      	lsrs	r5, r5, #16
 8000490:	1989      	adds	r1, r1, r6
 8000492:	4463      	add	r3, ip
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	18c9      	adds	r1, r1, r3
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	d434      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004da:	469b      	mov	fp, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	465a      	mov	r2, fp
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83b      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e079      	b.n	80005ea <__udivmoddi4+0x146>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e076      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e029      	b.n	8000570 <__udivmoddi4+0xcc>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	469b      	mov	fp, r3
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4652      	mov	r2, sl
 800054e:	40da      	lsrs	r2, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0013      	movs	r3, r2
 8000554:	464a      	mov	r2, r9
 8000556:	408a      	lsls	r2, r1
 8000558:	0017      	movs	r7, r2
 800055a:	4642      	mov	r2, r8
 800055c:	431f      	orrs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d9c3      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0d8      	beq.n	8000528 <__udivmoddi4+0x84>
 8000576:	07fb      	lsls	r3, r7, #31
 8000578:	0872      	lsrs	r2, r6, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4646      	mov	r6, r8
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	e00e      	b.n	80005a0 <__udivmoddi4+0xfc>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d101      	bne.n	800058a <__udivmoddi4+0xe6>
 8000586:	42a2      	cmp	r2, r4
 8000588:	d80c      	bhi.n	80005a4 <__udivmoddi4+0x100>
 800058a:	1aa4      	subs	r4, r4, r2
 800058c:	419d      	sbcs	r5, r3
 800058e:	2001      	movs	r0, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2100      	movs	r1, #0
 8000596:	3e01      	subs	r6, #1
 8000598:	1824      	adds	r4, r4, r0
 800059a:	414d      	adcs	r5, r1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d006      	beq.n	80005ae <__udivmoddi4+0x10a>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	d9ee      	bls.n	8000582 <__udivmoddi4+0xde>
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d1f8      	bne.n	80005a0 <__udivmoddi4+0xfc>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db24      	blt.n	8000606 <__udivmoddi4+0x162>
 80005bc:	002b      	movs	r3, r5
 80005be:	465a      	mov	r2, fp
 80005c0:	4644      	mov	r4, r8
 80005c2:	40d3      	lsrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db2a      	blt.n	8000628 <__udivmoddi4+0x184>
 80005d2:	0026      	movs	r6, r4
 80005d4:	409e      	lsls	r6, r3
 80005d6:	0033      	movs	r3, r6
 80005d8:	0026      	movs	r6, r4
 80005da:	4647      	mov	r7, r8
 80005dc:	40be      	lsls	r6, r7
 80005de:	0032      	movs	r2, r6
 80005e0:	1a80      	subs	r0, r0, r2
 80005e2:	4199      	sbcs	r1, r3
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	e79e      	b.n	8000528 <__udivmoddi4+0x84>
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	d8bc      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80005ee:	e782      	b.n	80004f6 <__udivmoddi4+0x52>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	9100      	str	r1, [sp, #0]
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	40da      	lsrs	r2, r3
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	e785      	b.n	8000512 <__udivmoddi4+0x6e>
 8000606:	4642      	mov	r2, r8
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4646      	mov	r6, r8
 8000610:	409a      	lsls	r2, r3
 8000612:	0023      	movs	r3, r4
 8000614:	40f3      	lsrs	r3, r6
 8000616:	4644      	mov	r4, r8
 8000618:	4313      	orrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	dad4      	bge.n	80005d2 <__udivmoddi4+0x12e>
 8000628:	4642      	mov	r2, r8
 800062a:	002f      	movs	r7, r5
 800062c:	2320      	movs	r3, #32
 800062e:	0026      	movs	r6, r4
 8000630:	4097      	lsls	r7, r2
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	40de      	lsrs	r6, r3
 8000636:	003b      	movs	r3, r7
 8000638:	4333      	orrs	r3, r6
 800063a:	e7cd      	b.n	80005d8 <__udivmoddi4+0x134>

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			; (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	; (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <left_motor_drive>:
#include <stdio.h>
#include <string.h>

#define SENSORS_OFFSET 50

void left_motor_drive(int PWM, char command[]){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]

	PWM %= 101;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2165      	movs	r1, #101	; 0x65
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff feac 	bl	80003fc <__aeabi_idivmod>
 80006a4:	000b      	movs	r3, r1
 80006a6:	607b      	str	r3, [r7, #4]

	if(!strcmp(command, "FORWARD")){
 80006a8:	4a33      	ldr	r2, [pc, #204]	; (8000778 <left_motor_drive+0xe8>)
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff fd2a 	bl	8000108 <strcmp>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d110      	bne.n	80006da <left_motor_drive+0x4a>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <left_motor_drive+0xec>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	2101      	movs	r1, #1
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 f86c 	bl	800179c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80006c4:	4b2d      	ldr	r3, [pc, #180]	; (800077c <left_motor_drive+0xec>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	2102      	movs	r1, #2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 f866 	bl	800179c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 80006d0:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <left_motor_drive+0xf0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	635a      	str	r2, [r3, #52]	; 0x34
	}else if(!strcmp(command, "SOFT STOP")){
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
	}
}
 80006d8:	e049      	b.n	800076e <left_motor_drive+0xde>
	}else if(!strcmp(command, "BACKWARD")){
 80006da:	4a2a      	ldr	r2, [pc, #168]	; (8000784 <left_motor_drive+0xf4>)
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff fd11 	bl	8000108 <strcmp>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d110      	bne.n	800070c <left_motor_drive+0x7c>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <left_motor_drive+0xec>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	2101      	movs	r1, #1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 f853 	bl	800179c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <left_motor_drive+0xec>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	2102      	movs	r1, #2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 f84d 	bl	800179c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PWM);
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <left_motor_drive+0xf0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	635a      	str	r2, [r3, #52]	; 0x34
}
 800070a:	e030      	b.n	800076e <left_motor_drive+0xde>
	}else if(!strcmp(command, "FAST STOP")){
 800070c:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <left_motor_drive+0xf8>)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff fcf8 	bl	8000108 <strcmp>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d110      	bne.n	800073e <left_motor_drive+0xae>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <left_motor_drive+0xec>)
 800071e:	2201      	movs	r2, #1
 8000720:	2101      	movs	r1, #1
 8000722:	0018      	movs	r0, r3
 8000724:	f001 f83a 	bl	800179c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <left_motor_drive+0xec>)
 800072a:	2201      	movs	r2, #1
 800072c:	2102      	movs	r1, #2
 800072e:	0018      	movs	r0, r3
 8000730:	f001 f834 	bl	800179c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <left_motor_drive+0xf0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2264      	movs	r2, #100	; 0x64
 800073a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800073c:	e017      	b.n	800076e <left_motor_drive+0xde>
	}else if(!strcmp(command, "SOFT STOP")){
 800073e:	4a13      	ldr	r2, [pc, #76]	; (800078c <left_motor_drive+0xfc>)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff fcdf 	bl	8000108 <strcmp>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d10f      	bne.n	800076e <left_motor_drive+0xde>
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <left_motor_drive+0xec>)
 8000750:	2201      	movs	r2, #1
 8000752:	2101      	movs	r1, #1
 8000754:	0018      	movs	r0, r3
 8000756:	f001 f821 	bl	800179c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <left_motor_drive+0xec>)
 800075c:	2201      	movs	r2, #1
 800075e:	2102      	movs	r1, #2
 8000760:	0018      	movs	r0, r3
 8000762:	f001 f81b 	bl	800179c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <left_motor_drive+0xf0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b002      	add	sp, #8
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	08004164 	.word	0x08004164
 800077c:	50000800 	.word	0x50000800
 8000780:	20000034 	.word	0x20000034
 8000784:	0800416c 	.word	0x0800416c
 8000788:	08004178 	.word	0x08004178
 800078c:	08004184 	.word	0x08004184

08000790 <right_motor_drive>:

void right_motor_drive(int PWM, char command[]){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]

	PWM %= 101;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2165      	movs	r1, #101	; 0x65
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fe2c 	bl	80003fc <__aeabi_idivmod>
 80007a4:	000b      	movs	r3, r1
 80007a6:	607b      	str	r3, [r7, #4]

	if(!strcmp(command, "FORWARD")){
 80007a8:	4a33      	ldr	r2, [pc, #204]	; (8000878 <right_motor_drive+0xe8>)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff fcaa 	bl	8000108 <strcmp>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d110      	bne.n	80007da <right_motor_drive+0x4a>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 80007b8:	4b30      	ldr	r3, [pc, #192]	; (800087c <right_motor_drive+0xec>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	2104      	movs	r1, #4
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 ffec 	bl	800179c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 80007c4:	4b2d      	ldr	r3, [pc, #180]	; (800087c <right_motor_drive+0xec>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	2108      	movs	r1, #8
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 ffe6 	bl	800179c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM);
 80007d0:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <right_motor_drive+0xf0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	63da      	str	r2, [r3, #60]	; 0x3c
	}else if(!strcmp(command, "SOFT STOP")){
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
	}
}
 80007d8:	e049      	b.n	800086e <right_motor_drive+0xde>
	}else if(!strcmp(command, "BACKWARD")){
 80007da:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <right_motor_drive+0xf4>)
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff fc91 	bl	8000108 <strcmp>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d110      	bne.n	800080c <right_motor_drive+0x7c>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <right_motor_drive+0xec>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	2104      	movs	r1, #4
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 ffd3 	bl	800179c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <right_motor_drive+0xec>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	2108      	movs	r1, #8
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 ffcd 	bl	800179c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWM);
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <right_motor_drive+0xf0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800080a:	e030      	b.n	800086e <right_motor_drive+0xde>
	}else if(!strcmp(command, "FAST STOP")){
 800080c:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <right_motor_drive+0xf8>)
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	0011      	movs	r1, r2
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff fc78 	bl	8000108 <strcmp>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d110      	bne.n	800083e <right_motor_drive+0xae>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <right_motor_drive+0xec>)
 800081e:	2201      	movs	r2, #1
 8000820:	2104      	movs	r1, #4
 8000822:	0018      	movs	r0, r3
 8000824:	f000 ffba 	bl	800179c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <right_motor_drive+0xec>)
 800082a:	2201      	movs	r2, #1
 800082c:	2108      	movs	r1, #8
 800082e:	0018      	movs	r0, r3
 8000830:	f000 ffb4 	bl	800179c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 100);
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <right_motor_drive+0xf0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2264      	movs	r2, #100	; 0x64
 800083a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800083c:	e017      	b.n	800086e <right_motor_drive+0xde>
	}else if(!strcmp(command, "SOFT STOP")){
 800083e:	4a13      	ldr	r2, [pc, #76]	; (800088c <right_motor_drive+0xfc>)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff fc5f 	bl	8000108 <strcmp>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d10f      	bne.n	800086e <right_motor_drive+0xde>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <right_motor_drive+0xec>)
 8000850:	2201      	movs	r2, #1
 8000852:	2104      	movs	r1, #4
 8000854:	0018      	movs	r0, r3
 8000856:	f000 ffa1 	bl	800179c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <right_motor_drive+0xec>)
 800085c:	2201      	movs	r2, #1
 800085e:	2108      	movs	r1, #8
 8000860:	0018      	movs	r0, r3
 8000862:	f000 ff9b 	bl	800179c <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <right_motor_drive+0xf0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2200      	movs	r2, #0
 800086c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	08004164 	.word	0x08004164
 800087c:	50000800 	.word	0x50000800
 8000880:	20000034 	.word	0x20000034
 8000884:	0800416c 	.word	0x0800416c
 8000888:	08004178 	.word	0x08004178
 800088c:	08004184 	.word	0x08004184

08000890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b08b      	sub	sp, #44	; 0x2c
 8000894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	2414      	movs	r4, #20
 8000898:	193b      	adds	r3, r7, r4
 800089a:	0018      	movs	r0, r3
 800089c:	2314      	movs	r3, #20
 800089e:	001a      	movs	r2, r3
 80008a0:	2100      	movs	r1, #0
 80008a2:	f003 fc27 	bl	80040f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <MX_GPIO_Init+0x118>)
 80008a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008aa:	4b3f      	ldr	r3, [pc, #252]	; (80009a8 <MX_GPIO_Init+0x118>)
 80008ac:	2104      	movs	r1, #4
 80008ae:	430a      	orrs	r2, r1
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008b2:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <MX_GPIO_Init+0x118>)
 80008b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b6:	2204      	movs	r2, #4
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	4b3a      	ldr	r3, [pc, #232]	; (80009a8 <MX_GPIO_Init+0x118>)
 80008c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c2:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <MX_GPIO_Init+0x118>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	430a      	orrs	r2, r1
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ca:	4b37      	ldr	r3, [pc, #220]	; (80009a8 <MX_GPIO_Init+0x118>)
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	4013      	ands	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <MX_GPIO_Init+0x118>)
 80008d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008da:	4b33      	ldr	r3, [pc, #204]	; (80009a8 <MX_GPIO_Init+0x118>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e2:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <MX_GPIO_Init+0x118>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <MX_GPIO_Init+0x118>)
 80008f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f2:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <MX_GPIO_Init+0x118>)
 80008f4:	2102      	movs	r1, #2
 80008f6:	430a      	orrs	r2, r1
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008fa:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <MX_GPIO_Init+0x118>)
 80008fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fe:	2202      	movs	r2, #2
 8000900:	4013      	ands	r3, r2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8000906:	4b29      	ldr	r3, [pc, #164]	; (80009ac <MX_GPIO_Init+0x11c>)
 8000908:	2200      	movs	r2, #0
 800090a:	210f      	movs	r1, #15
 800090c:	0018      	movs	r0, r3
 800090e:	f000 ff45 	bl	800179c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000912:	23a0      	movs	r3, #160	; 0xa0
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	0018      	movs	r0, r3
 800091c:	f000 ff3e 	bl	800179c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	220f      	movs	r2, #15
 8000924:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	193b      	adds	r3, r7, r4
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <MX_GPIO_Init+0x11c>)
 800093c:	0019      	movs	r1, r3
 800093e:	0010      	movs	r0, r2
 8000940:	f000 fdb6 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2220      	movs	r2, #32
 8000948:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2201      	movs	r2, #1
 800094e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800095c:	193a      	adds	r2, r7, r4
 800095e:	23a0      	movs	r3, #160	; 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	0011      	movs	r1, r2
 8000964:	0018      	movs	r0, r3
 8000966:	f000 fda3 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = lewy_int_Pin|prawy_int_Pin;
 800096a:	0021      	movs	r1, r4
 800096c:	187b      	adds	r3, r7, r1
 800096e:	22c0      	movs	r2, #192	; 0xc0
 8000970:	01d2      	lsls	r2, r2, #7
 8000972:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2288      	movs	r2, #136	; 0x88
 8000978:	0352      	lsls	r2, r2, #13
 800097a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2202      	movs	r2, #2
 8000980:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	187b      	adds	r3, r7, r1
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <MX_GPIO_Init+0x120>)
 8000986:	0019      	movs	r1, r3
 8000988:	0010      	movs	r0, r2
 800098a:	f000 fd91 	bl	80014b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2007      	movs	r0, #7
 8000994:	f000 fcd2 	bl	800133c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000998:	2007      	movs	r0, #7
 800099a:	f000 fce4 	bl	8001366 <HAL_NVIC_EnableIRQ>

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b00b      	add	sp, #44	; 0x2c
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40021000 	.word	0x40021000
 80009ac:	50000800 	.word	0x50000800
 80009b0:	50000400 	.word	0x50000400

080009b4 <HAL_GPIO_EXTI_Callback>:

  return 1;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	0002      	movs	r2, r0
 80009bc:	1dbb      	adds	r3, r7, #6
 80009be:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == lewy_int_Pin) {
 80009c0:	1dbb      	adds	r3, r7, #6
 80009c2:	881a      	ldrh	r2, [r3, #0]
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	019b      	lsls	r3, r3, #6
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d10a      	bne.n	80009e2 <HAL_GPIO_EXTI_Callback+0x2e>
    HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80009cc:	23a0      	movs	r3, #160	; 0xa0
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	2201      	movs	r2, #1
 80009d2:	2120      	movs	r1, #32
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 fee1 	bl	800179c <HAL_GPIO_WritePin>
    collision_flag = 1;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_GPIO_EXTI_Callback+0x58>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
  } else if(GPIO_Pin == prawy_int_Pin){
	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
	collision_flag = 1;
  }
}
 80009e0:	e00f      	b.n	8000a02 <HAL_GPIO_EXTI_Callback+0x4e>
  } else if(GPIO_Pin == prawy_int_Pin){
 80009e2:	1dbb      	adds	r3, r7, #6
 80009e4:	881a      	ldrh	r2, [r3, #0]
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	01db      	lsls	r3, r3, #7
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d109      	bne.n	8000a02 <HAL_GPIO_EXTI_Callback+0x4e>
	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80009ee:	23a0      	movs	r3, #160	; 0xa0
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	2201      	movs	r2, #1
 80009f4:	2120      	movs	r1, #32
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fed0 	bl	800179c <HAL_GPIO_WritePin>
	collision_flag = 1;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_GPIO_EXTI_Callback+0x58>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b002      	add	sp, #8
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	2000002c 	.word	0x2000002c

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a14:	f000 fb52 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a18:	f000 f8fa 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1c:	f7ff ff38 	bl	8000890 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a20:	f000 faa6 	bl	8000f70 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a24:	f000 f9c6 	bl	8000db4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000a28:	4b6c      	ldr	r3, [pc, #432]	; (8000bdc <main+0x1cc>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 fe80 	bl	8002730 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a30:	4b6a      	ldr	r3, [pc, #424]	; (8000bdc <main+0x1cc>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	0018      	movs	r0, r3
 8000a36:	f001 ff07 	bl	8002848 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a3a:	4b68      	ldr	r3, [pc, #416]	; (8000bdc <main+0x1cc>)
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 ff02 	bl	8002848 <HAL_TIM_PWM_Start>
 8000a44:	4b66      	ldr	r3, [pc, #408]	; (8000be0 <main+0x1d0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
  memset(buffer, 0, sizeof(buffer));
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000a4a:	4b66      	ldr	r3, [pc, #408]	; (8000be4 <main+0x1d4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b64      	ldr	r3, [pc, #400]	; (8000be4 <main+0x1d4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2120      	movs	r1, #32
 8000a56:	430a      	orrs	r2, r1
 8000a58:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(!remote_flag)
 8000a5a:	4b63      	ldr	r3, [pc, #396]	; (8000be8 <main+0x1d8>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d136      	bne.n	8000ad2 <main+0xc2>
	  {
		  left_motor_drive(70,"FORWARD");
 8000a64:	4b61      	ldr	r3, [pc, #388]	; (8000bec <main+0x1dc>)
 8000a66:	0019      	movs	r1, r3
 8000a68:	2046      	movs	r0, #70	; 0x46
 8000a6a:	f7ff fe11 	bl	8000690 <left_motor_drive>
		  right_motor_drive(70,"FORWARD");
 8000a6e:	4b5f      	ldr	r3, [pc, #380]	; (8000bec <main+0x1dc>)
 8000a70:	0019      	movs	r1, r3
 8000a72:	2046      	movs	r0, #70	; 0x46
 8000a74:	f7ff fe8c 	bl	8000790 <right_motor_drive>

		  if(collision_flag)
 8000a78:	4b5d      	ldr	r3, [pc, #372]	; (8000bf0 <main+0x1e0>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d027      	beq.n	8000ad2 <main+0xc2>
		  {
			left_motor_drive(70,"BACKWARD");
 8000a82:	4b5c      	ldr	r3, [pc, #368]	; (8000bf4 <main+0x1e4>)
 8000a84:	0019      	movs	r1, r3
 8000a86:	2046      	movs	r0, #70	; 0x46
 8000a88:	f7ff fe02 	bl	8000690 <left_motor_drive>
			right_motor_drive(70,"BACKWARD");
 8000a8c:	4b59      	ldr	r3, [pc, #356]	; (8000bf4 <main+0x1e4>)
 8000a8e:	0019      	movs	r1, r3
 8000a90:	2046      	movs	r0, #70	; 0x46
 8000a92:	f7ff fe7d 	bl	8000790 <right_motor_drive>
			collision_flag = 0;
 8000a96:	4b56      	ldr	r3, [pc, #344]	; (8000bf0 <main+0x1e0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fe79 	bl	800179c <HAL_GPIO_WritePin>
			HAL_Delay(800);
 8000aaa:	23c8      	movs	r3, #200	; 0xc8
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 fb74 	bl	800119c <HAL_Delay>
			left_motor_drive(70,"FORWARD");
 8000ab4:	4b4d      	ldr	r3, [pc, #308]	; (8000bec <main+0x1dc>)
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	2046      	movs	r0, #70	; 0x46
 8000aba:	f7ff fde9 	bl	8000690 <left_motor_drive>
			right_motor_drive(70,"BACKWARD");
 8000abe:	4b4d      	ldr	r3, [pc, #308]	; (8000bf4 <main+0x1e4>)
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	2046      	movs	r0, #70	; 0x46
 8000ac4:	f7ff fe64 	bl	8000790 <right_motor_drive>
			HAL_Delay(300);
 8000ac8:	2396      	movs	r3, #150	; 0x96
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 fb65 	bl	800119c <HAL_Delay>
		  }
	  }

	  if(!strcmp(buffer, "w"))
 8000ad2:	4a49      	ldr	r2, [pc, #292]	; (8000bf8 <main+0x1e8>)
 8000ad4:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <main+0x1d0>)
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff fb15 	bl	8000108 <strcmp>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d110      	bne.n	8000b04 <main+0xf4>
	  {
		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000ae2:	23a0      	movs	r3, #160	; 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	2120      	movs	r1, #32
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 fe74 	bl	80017d6 <HAL_GPIO_TogglePin>
		  left_motor_drive(70,"FORWARD");
 8000aee:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <main+0x1dc>)
 8000af0:	0019      	movs	r1, r3
 8000af2:	2046      	movs	r0, #70	; 0x46
 8000af4:	f7ff fdcc 	bl	8000690 <left_motor_drive>
		  right_motor_drive(70,"FORWARD");
 8000af8:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <main+0x1dc>)
 8000afa:	0019      	movs	r1, r3
 8000afc:	2046      	movs	r0, #70	; 0x46
 8000afe:	f7ff fe47 	bl	8000790 <right_motor_drive>
 8000b02:	e7aa      	b.n	8000a5a <main+0x4a>
	  }
	  else if(!strcmp(buffer, "s"))
 8000b04:	4a3d      	ldr	r2, [pc, #244]	; (8000bfc <main+0x1ec>)
 8000b06:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <main+0x1d0>)
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fafc 	bl	8000108 <strcmp>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d110      	bne.n	8000b36 <main+0x126>
	  {
		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000b14:	23a0      	movs	r3, #160	; 0xa0
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	2120      	movs	r1, #32
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 fe5b 	bl	80017d6 <HAL_GPIO_TogglePin>
		  left_motor_drive(70,"BACKWARD");
 8000b20:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <main+0x1e4>)
 8000b22:	0019      	movs	r1, r3
 8000b24:	2046      	movs	r0, #70	; 0x46
 8000b26:	f7ff fdb3 	bl	8000690 <left_motor_drive>
		  right_motor_drive(70,"BACKWARD");
 8000b2a:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <main+0x1e4>)
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	2046      	movs	r0, #70	; 0x46
 8000b30:	f7ff fe2e 	bl	8000790 <right_motor_drive>
 8000b34:	e791      	b.n	8000a5a <main+0x4a>
	  }
	  else if(!strcmp(buffer, "a"))
 8000b36:	4a32      	ldr	r2, [pc, #200]	; (8000c00 <main+0x1f0>)
 8000b38:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <main+0x1d0>)
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff fae3 	bl	8000108 <strcmp>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d110      	bne.n	8000b68 <main+0x158>
	  {
		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000b46:	23a0      	movs	r3, #160	; 0xa0
 8000b48:	05db      	lsls	r3, r3, #23
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f000 fe42 	bl	80017d6 <HAL_GPIO_TogglePin>
		  left_motor_drive(70,"BACKWARD");
 8000b52:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <main+0x1e4>)
 8000b54:	0019      	movs	r1, r3
 8000b56:	2046      	movs	r0, #70	; 0x46
 8000b58:	f7ff fd9a 	bl	8000690 <left_motor_drive>
		  right_motor_drive(70,"FORWARD");
 8000b5c:	4b23      	ldr	r3, [pc, #140]	; (8000bec <main+0x1dc>)
 8000b5e:	0019      	movs	r1, r3
 8000b60:	2046      	movs	r0, #70	; 0x46
 8000b62:	f7ff fe15 	bl	8000790 <right_motor_drive>
 8000b66:	e778      	b.n	8000a5a <main+0x4a>
	  }
	  else if(!strcmp(buffer, "d"))
 8000b68:	4a26      	ldr	r2, [pc, #152]	; (8000c04 <main+0x1f4>)
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <main+0x1d0>)
 8000b6c:	0011      	movs	r1, r2
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f7ff faca 	bl	8000108 <strcmp>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d110      	bne.n	8000b9a <main+0x18a>
	  {
		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 fe29 	bl	80017d6 <HAL_GPIO_TogglePin>
		  left_motor_drive(70,"FORWARD");
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <main+0x1dc>)
 8000b86:	0019      	movs	r1, r3
 8000b88:	2046      	movs	r0, #70	; 0x46
 8000b8a:	f7ff fd81 	bl	8000690 <left_motor_drive>
		  right_motor_drive(70,"BACKWARD");
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <main+0x1e4>)
 8000b90:	0019      	movs	r1, r3
 8000b92:	2046      	movs	r0, #70	; 0x46
 8000b94:	f7ff fdfc 	bl	8000790 <right_motor_drive>
 8000b98:	e75f      	b.n	8000a5a <main+0x4a>
	  }
	  else if(!strcmp(buffer, "x"))
 8000b9a:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <main+0x1f8>)
 8000b9c:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <main+0x1d0>)
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff fab1 	bl	8000108 <strcmp>
 8000ba6:	1e03      	subs	r3, r0, #0
 8000ba8:	d000      	beq.n	8000bac <main+0x19c>
 8000baa:	e756      	b.n	8000a5a <main+0x4a>
	  {
		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000bac:	23a0      	movs	r3, #160	; 0xa0
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 fe0f 	bl	80017d6 <HAL_GPIO_TogglePin>
		  left_motor_drive(0,"FAST STOP");
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <main+0x1fc>)
 8000bba:	0019      	movs	r1, r3
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff fd67 	bl	8000690 <left_motor_drive>
		  right_motor_drive(0,"FAST STOP");
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <main+0x1fc>)
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff fde2 	bl	8000790 <right_motor_drive>
		  HAL_Delay(100);
 8000bcc:	2064      	movs	r0, #100	; 0x64
 8000bce:	f000 fae5 	bl	800119c <HAL_Delay>
		  remote_flag = 0;
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <main+0x1d8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
	  if(!remote_flag)
 8000bd8:	e73f      	b.n	8000a5a <main+0x4a>
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	20000034 	.word	0x20000034
 8000be0:	20000030 	.word	0x20000030
 8000be4:	20000074 	.word	0x20000074
 8000be8:	20000000 	.word	0x20000000
 8000bec:	08004190 	.word	0x08004190
 8000bf0:	2000002c 	.word	0x2000002c
 8000bf4:	08004198 	.word	0x08004198
 8000bf8:	080041a4 	.word	0x080041a4
 8000bfc:	080041a8 	.word	0x080041a8
 8000c00:	080041ac 	.word	0x080041ac
 8000c04:	080041b0 	.word	0x080041b0
 8000c08:	080041b4 	.word	0x080041b4
 8000c0c:	080041b8 	.word	0x080041b8

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b09d      	sub	sp, #116	; 0x74
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	2438      	movs	r4, #56	; 0x38
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2338      	movs	r3, #56	; 0x38
 8000c1e:	001a      	movs	r2, r3
 8000c20:	2100      	movs	r1, #0
 8000c22:	f003 fa67 	bl	80040f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c26:	2324      	movs	r3, #36	; 0x24
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	2314      	movs	r3, #20
 8000c2e:	001a      	movs	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	f003 fa5f 	bl	80040f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c36:	003b      	movs	r3, r7
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2324      	movs	r3, #36	; 0x24
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f003 fa58 	bl	80040f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c44:	4b29      	ldr	r3, [pc, #164]	; (8000cec <SystemClock_Config+0xdc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <SystemClock_Config+0xe0>)
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <SystemClock_Config+0xdc>)
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	0109      	lsls	r1, r1, #4
 8000c52:	430a      	orrs	r2, r1
 8000c54:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c56:	0021      	movs	r1, r4
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	22a0      	movs	r2, #160	; 0xa0
 8000c62:	02d2      	lsls	r2, r2, #11
 8000c64:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2202      	movs	r2, #2
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	0252      	lsls	r2, r2, #9
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	22c0      	movs	r2, #192	; 0xc0
 8000c78:	0312      	lsls	r2, r2, #12
 8000c7a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	03d2      	lsls	r2, r2, #15
 8000c82:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 fddc 	bl	8001844 <HAL_RCC_OscConfig>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c90:	f000 f830 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c94:	2124      	movs	r1, #36	; 0x24
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	220f      	movs	r2, #15
 8000c9a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f001 f987 	bl	8001fcc <HAL_RCC_ClockConfig>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000cc2:	f000 f817 	bl	8000cf4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cc6:	003b      	movs	r3, r7
 8000cc8:	2202      	movs	r2, #2
 8000cca:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ccc:	003b      	movs	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd2:	003b      	movs	r3, r7
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f001 fb9d 	bl	8002414 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000cde:	f000 f809 	bl	8000cf4 <Error_Handler>
  }
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b01d      	add	sp, #116	; 0x74
 8000ce8:	bd90      	pop	{r4, r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40007000 	.word	0x40007000
 8000cf0:	ffffe7ff 	.word	0xffffe7ff

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_MspInit+0x24>)
 8000d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x24>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_MspInit+0x24>)
 8000d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_MspInit+0x24>)
 8000d16:	2180      	movs	r1, #128	; 0x80
 8000d18:	0549      	lsls	r1, r1, #21
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 fa0a 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(lewy_int_Pin);
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	019b      	lsls	r3, r3, #6
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fd54 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(prawy_int_Pin);
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 fd4f 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)buffer, 1, 10);
 8000d78:	4909      	ldr	r1, [pc, #36]	; (8000da0 <USART2_IRQHandler+0x2c>)
 8000d7a:	480a      	ldr	r0, [pc, #40]	; (8000da4 <USART2_IRQHandler+0x30>)
 8000d7c:	230a      	movs	r3, #10
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f002 f8dc 	bl	8002f3c <HAL_UART_Receive>
	HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000d84:	23a0      	movs	r3, #160	; 0xa0
 8000d86:	05db      	lsls	r3, r3, #23
 8000d88:	2120      	movs	r1, #32
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 fd23 	bl	80017d6 <HAL_GPIO_TogglePin>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <USART2_IRQHandler+0x30>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f002 f9b8 	bl	8003108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	20000030 	.word	0x20000030
 8000da4:	20000074 	.word	0x20000074

08000da8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dba:	2310      	movs	r3, #16
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f003 f995 	bl	80040f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dca:	003b      	movs	r3, r7
 8000dcc:	0018      	movs	r0, r3
 8000dce:	2310      	movs	r3, #16
 8000dd0:	001a      	movs	r2, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	f003 f98e 	bl	80040f4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MX_TIM2_Init+0xcc>)
 8000dda:	2280      	movs	r2, #128	; 0x80
 8000ddc:	05d2      	lsls	r2, r2, #23
 8000dde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <MX_TIM2_Init+0xcc>)
 8000de2:	220f      	movs	r2, #15
 8000de4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_TIM2_Init+0xcc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <MX_TIM2_Init+0xcc>)
 8000dee:	2264      	movs	r2, #100	; 0x64
 8000df0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <MX_TIM2_Init+0xcc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <MX_TIM2_Init+0xcc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <MX_TIM2_Init+0xcc>)
 8000e00:	0018      	movs	r0, r3
 8000e02:	f001 fce1 	bl	80027c8 <HAL_TIM_PWM_Init>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e0a:	f7ff ff73 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0e:	2110      	movs	r1, #16
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e1c:	187a      	adds	r2, r7, r1
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <MX_TIM2_Init+0xcc>)
 8000e20:	0011      	movs	r1, r2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f001 ffde 	bl	8002de4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000e2c:	f7ff ff62 	bl	8000cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e30:	003b      	movs	r3, r7
 8000e32:	2260      	movs	r2, #96	; 0x60
 8000e34:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 25;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2219      	movs	r2, #25
 8000e3a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e48:	0039      	movs	r1, r7
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <MX_TIM2_Init+0xcc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f001 fd86 	bl	8002960 <HAL_TIM_PWM_ConfigChannel>
 8000e54:	1e03      	subs	r3, r0, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000e58:	f7ff ff4c 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e5c:	0039      	movs	r1, r7
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_TIM2_Init+0xcc>)
 8000e60:	2208      	movs	r2, #8
 8000e62:	0018      	movs	r0, r3
 8000e64:	f001 fd7c 	bl	8002960 <HAL_TIM_PWM_ConfigChannel>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000e6c:	f7ff ff42 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <MX_TIM2_Init+0xcc>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f000 f81c 	bl	8000eb0 <HAL_TIM_MspPostInit>

}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b006      	add	sp, #24
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000034 	.word	0x20000034

08000e84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	05db      	lsls	r3, r3, #23
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d105      	bne.n	8000ea4 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <HAL_TIM_PWM_MspInit+0x28>)
 8000e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_TIM_PWM_MspInit+0x28>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40021000 	.word	0x40021000

08000eb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	2414      	movs	r4, #20
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	2314      	movs	r3, #20
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	f003 f916 	bl	80040f4 <memset>
  if(timHandle->Instance==TIM2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	05db      	lsls	r3, r3, #23
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d145      	bne.n	8000f60 <HAL_TIM_MspPostInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <HAL_TIM_MspPostInit+0xb8>)
 8000ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_TIM_MspPostInit+0xb8>)
 8000eda:	2102      	movs	r1, #2
 8000edc:	430a      	orrs	r2, r1
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_TIM_MspPostInit+0xb8>)
 8000ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_TIM_MspPostInit+0xb8>)
 8000eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_TIM_MspPostInit+0xb8>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_TIM_MspPostInit+0xb8>)
 8000efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efc:	2201      	movs	r2, #1
 8000efe:	4013      	ands	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	00d2      	lsls	r2, r2, #3
 8000f0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	2202      	movs	r2, #2
 8000f10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	193b      	adds	r3, r7, r4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	2202      	movs	r2, #2
 8000f22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <HAL_TIM_MspPostInit+0xbc>)
 8000f28:	0019      	movs	r1, r3
 8000f2a:	0010      	movs	r0, r2
 8000f2c:	f000 fac0 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f30:	0021      	movs	r1, r4
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	0212      	lsls	r2, r2, #8
 8000f38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2205      	movs	r2, #5
 8000f50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	187a      	adds	r2, r7, r1
 8000f54:	23a0      	movs	r3, #160	; 0xa0
 8000f56:	05db      	lsls	r3, r3, #23
 8000f58:	0011      	movs	r1, r2
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 faa8 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b00b      	add	sp, #44	; 0x2c
 8000f66:	bd90      	pop	{r4, r7, pc}
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	50000400 	.word	0x50000400

08000f70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_USART2_UART_Init+0x58>)
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <MX_USART2_UART_Init+0x5c>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_USART2_UART_Init+0x58>)
 8000f7c:	2296      	movs	r2, #150	; 0x96
 8000f7e:	0192      	lsls	r2, r2, #6
 8000f80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USART2_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_USART2_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USART2_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USART2_UART_Init+0x58>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USART2_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USART2_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USART2_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USART2_UART_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <MX_USART2_UART_Init+0x58>)
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f001 ff6d 	bl	8002e94 <HAL_UART_Init>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fbe:	f7ff fe99 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000074 	.word	0x20000074
 8000fcc:	40004400 	.word	0x40004400

08000fd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	240c      	movs	r4, #12
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	0018      	movs	r0, r3
 8000fde:	2314      	movs	r3, #20
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f003 f886 	bl	80040f4 <memset>
  if(uartHandle->Instance==USART2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <HAL_UART_MspInit+0x90>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d131      	bne.n	8001056 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_UART_MspInit+0x94>)
 8000ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_UART_MspInit+0x94>)
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	0289      	lsls	r1, r1, #10
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_UART_MspInit+0x94>)
 8001002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_UART_MspInit+0x94>)
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_UART_MspInit+0x94>)
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	2201      	movs	r2, #1
 8001012:	4013      	ands	r3, r2
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001018:	0021      	movs	r1, r4
 800101a:	187b      	adds	r3, r7, r1
 800101c:	220c      	movs	r2, #12
 800101e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2202      	movs	r2, #2
 8001024:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2203      	movs	r2, #3
 8001030:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2204      	movs	r2, #4
 8001036:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	187a      	adds	r2, r7, r1
 800103a:	23a0      	movs	r3, #160	; 0xa0
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	0011      	movs	r1, r2
 8001040:	0018      	movs	r0, r3
 8001042:	f000 fa35 	bl	80014b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	201c      	movs	r0, #28
 800104c:	f000 f976 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001050:	201c      	movs	r0, #28
 8001052:	f000 f988 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	b009      	add	sp, #36	; 0x24
 800105c:	bd90      	pop	{r4, r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	40004400 	.word	0x40004400
 8001064:	40021000 	.word	0x40021000

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800106c:	f7ff fe9c 	bl	8000da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	; (80010a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	; (80010b4 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f003 f835 	bl	8004104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fcb9 	bl	8000a10 <main>

0800109e <LoopForever>:

LoopForever:
    b LoopForever
 800109e:	e7fe      	b.n	800109e <LoopForever>
  ldr   r0, =_estack
 80010a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010ac:	08004240 	.word	0x08004240
  ldr r2, =_sbss
 80010b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010b4:	20000100 	.word	0x20000100

080010b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_COMP_IRQHandler>
	...

080010bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_Init+0x3c>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_Init+0x3c>)
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	430a      	orrs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 f811 	bl	80010fc <HAL_InitTick>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e001      	b.n	80010ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e6:	f7ff fe0b 	bl	8000d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	40022000 	.word	0x40022000

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_InitTick+0x5c>)
 8001106:	681c      	ldr	r4, [r3, #0]
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_InitTick+0x60>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	0019      	movs	r1, r3
 800110e:	23fa      	movs	r3, #250	; 0xfa
 8001110:	0098      	lsls	r0, r3, #2
 8001112:	f7ff f803 	bl	800011c <__udivsi3>
 8001116:	0003      	movs	r3, r0
 8001118:	0019      	movs	r1, r3
 800111a:	0020      	movs	r0, r4
 800111c:	f7fe fffe 	bl	800011c <__udivsi3>
 8001120:	0003      	movs	r3, r0
 8001122:	0018      	movs	r0, r3
 8001124:	f000 f92f 	bl	8001386 <HAL_SYSTICK_Config>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d001      	beq.n	8001130 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e00f      	b.n	8001150 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d80b      	bhi.n	800114e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	2301      	movs	r3, #1
 800113a:	425b      	negs	r3, r3
 800113c:	2200      	movs	r2, #0
 800113e:	0018      	movs	r0, r3
 8001140:	f000 f8fc 	bl	800133c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_InitTick+0x64>)
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	b003      	add	sp, #12
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	20000004 	.word	0x20000004
 800115c:	2000000c 	.word	0x2000000c
 8001160:	20000008 	.word	0x20000008

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x1c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	001a      	movs	r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x20>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	18d2      	adds	r2, r2, r3
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_IncTick+0x20>)
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	2000000c 	.word	0x2000000c
 8001184:	200000fc 	.word	0x200000fc

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <HAL_GetTick+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	200000fc 	.word	0x200000fc

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fff0 	bl	8001188 <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3301      	adds	r3, #1
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	001a      	movs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	189b      	adds	r3, r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	f7ff ffe0 	bl	8001188 <HAL_GetTick>
 80011c8:	0002      	movs	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b004      	add	sp, #16
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	2000000c 	.word	0x2000000c

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	0002      	movs	r2, r0
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b7f      	cmp	r3, #127	; 0x7f
 80011f6:	d809      	bhi.n	800120c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	001a      	movs	r2, r3
 80011fe:	231f      	movs	r3, #31
 8001200:	401a      	ands	r2, r3
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <__NVIC_EnableIRQ+0x30>)
 8001204:	2101      	movs	r1, #1
 8001206:	4091      	lsls	r1, r2
 8001208:	000a      	movs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
  }
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	0002      	movs	r2, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b7f      	cmp	r3, #127	; 0x7f
 800122c:	d828      	bhi.n	8001280 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800122e:	4a2f      	ldr	r2, [pc, #188]	; (80012ec <__NVIC_SetPriority+0xd4>)
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b25b      	sxtb	r3, r3
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	33c0      	adds	r3, #192	; 0xc0
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	589b      	ldr	r3, [r3, r2]
 800123e:	1dfa      	adds	r2, r7, #7
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	0011      	movs	r1, r2
 8001244:	2203      	movs	r2, #3
 8001246:	400a      	ands	r2, r1
 8001248:	00d2      	lsls	r2, r2, #3
 800124a:	21ff      	movs	r1, #255	; 0xff
 800124c:	4091      	lsls	r1, r2
 800124e:	000a      	movs	r2, r1
 8001250:	43d2      	mvns	r2, r2
 8001252:	401a      	ands	r2, r3
 8001254:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	019b      	lsls	r3, r3, #6
 800125a:	22ff      	movs	r2, #255	; 0xff
 800125c:	401a      	ands	r2, r3
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	0018      	movs	r0, r3
 8001264:	2303      	movs	r3, #3
 8001266:	4003      	ands	r3, r0
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126c:	481f      	ldr	r0, [pc, #124]	; (80012ec <__NVIC_SetPriority+0xd4>)
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	430a      	orrs	r2, r1
 8001278:	33c0      	adds	r3, #192	; 0xc0
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800127e:	e031      	b.n	80012e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <__NVIC_SetPriority+0xd8>)
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	0019      	movs	r1, r3
 8001288:	230f      	movs	r3, #15
 800128a:	400b      	ands	r3, r1
 800128c:	3b08      	subs	r3, #8
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3306      	adds	r3, #6
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	18d3      	adds	r3, r2, r3
 8001296:	3304      	adds	r3, #4
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	1dfa      	adds	r2, r7, #7
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	0011      	movs	r1, r2
 80012a0:	2203      	movs	r2, #3
 80012a2:	400a      	ands	r2, r1
 80012a4:	00d2      	lsls	r2, r2, #3
 80012a6:	21ff      	movs	r1, #255	; 0xff
 80012a8:	4091      	lsls	r1, r2
 80012aa:	000a      	movs	r2, r1
 80012ac:	43d2      	mvns	r2, r2
 80012ae:	401a      	ands	r2, r3
 80012b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	019b      	lsls	r3, r3, #6
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	401a      	ands	r2, r3
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	0018      	movs	r0, r3
 80012c0:	2303      	movs	r3, #3
 80012c2:	4003      	ands	r3, r0
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <__NVIC_SetPriority+0xd8>)
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	001c      	movs	r4, r3
 80012d0:	230f      	movs	r3, #15
 80012d2:	4023      	ands	r3, r4
 80012d4:	3b08      	subs	r3, #8
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	430a      	orrs	r2, r1
 80012da:	3306      	adds	r3, #6
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	18c3      	adds	r3, r0, r3
 80012e0:	3304      	adds	r3, #4
 80012e2:	601a      	str	r2, [r3, #0]
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b003      	add	sp, #12
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	1e5a      	subs	r2, r3, #1
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	045b      	lsls	r3, r3, #17
 8001304:	429a      	cmp	r2, r3
 8001306:	d301      	bcc.n	800130c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001308:	2301      	movs	r3, #1
 800130a:	e010      	b.n	800132e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <SysTick_Config+0x44>)
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	3a01      	subs	r2, #1
 8001312:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001314:	2301      	movs	r3, #1
 8001316:	425b      	negs	r3, r3
 8001318:	2103      	movs	r1, #3
 800131a:	0018      	movs	r0, r3
 800131c:	f7ff ff7c 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x44>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x44>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	210f      	movs	r1, #15
 8001348:	187b      	adds	r3, r7, r1
 800134a:	1c02      	adds	r2, r0, #0
 800134c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	187b      	adds	r3, r7, r1
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b25b      	sxtb	r3, r3
 8001356:	0011      	movs	r1, r2
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff ff5d 	bl	8001218 <__NVIC_SetPriority>
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	0002      	movs	r2, r0
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b25b      	sxtb	r3, r3
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff ff33 	bl	80011e4 <__NVIC_EnableIRQ>
}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff ffaf 	bl	80012f4 <SysTick_Config>
 8001396:	0003      	movs	r3, r0
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b002      	add	sp, #8
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a8:	230f      	movs	r3, #15
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2225      	movs	r2, #37	; 0x25
 80013b4:	5c9b      	ldrb	r3, [r3, r2]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d008      	beq.n	80013ce <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2204      	movs	r2, #4
 80013c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2224      	movs	r2, #36	; 0x24
 80013c6:	2100      	movs	r1, #0
 80013c8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e024      	b.n	8001418 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	210e      	movs	r1, #14
 80013da:	438a      	bics	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2101      	movs	r1, #1
 80013ea:	438a      	bics	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	221c      	movs	r2, #28
 80013f4:	401a      	ands	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	2101      	movs	r1, #1
 80013fc:	4091      	lsls	r1, r2
 80013fe:	000a      	movs	r2, r1
 8001400:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2225      	movs	r2, #37	; 0x25
 8001406:	2101      	movs	r1, #1
 8001408:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2224      	movs	r2, #36	; 0x24
 800140e:	2100      	movs	r1, #0
 8001410:	5499      	strb	r1, [r3, r2]

    return status;
 8001412:	230f      	movs	r3, #15
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b004      	add	sp, #16
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001428:	210f      	movs	r1, #15
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2225      	movs	r2, #37	; 0x25
 8001434:	5c9b      	ldrb	r3, [r3, r2]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d006      	beq.n	800144a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2204      	movs	r2, #4
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	e02a      	b.n	80014a0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	210e      	movs	r1, #14
 8001456:	438a      	bics	r2, r1
 8001458:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2101      	movs	r1, #1
 8001466:	438a      	bics	r2, r1
 8001468:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	221c      	movs	r2, #28
 8001470:	401a      	ands	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	2101      	movs	r1, #1
 8001478:	4091      	lsls	r1, r2
 800147a:	000a      	movs	r2, r1
 800147c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2225      	movs	r2, #37	; 0x25
 8001482:	2101      	movs	r1, #1
 8001484:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2224      	movs	r2, #36	; 0x24
 800148a:	2100      	movs	r1, #0
 800148c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001492:	2b00      	cmp	r3, #0
 8001494:	d004      	beq.n	80014a0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	0010      	movs	r0, r2
 800149e:	4798      	blx	r3
    }
  }
  return status;
 80014a0:	230f      	movs	r3, #15
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	781b      	ldrb	r3, [r3, #0]
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b004      	add	sp, #16
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014c6:	e14f      	b.n	8001768 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4091      	lsls	r1, r2
 80014d2:	000a      	movs	r2, r1
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d100      	bne.n	80014e0 <HAL_GPIO_Init+0x30>
 80014de:	e140      	b.n	8001762 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2203      	movs	r2, #3
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d005      	beq.n	80014f8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2203      	movs	r2, #3
 80014f2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d130      	bne.n	800155a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	409a      	lsls	r2, r3
 8001506:	0013      	movs	r3, r2
 8001508:	43da      	mvns	r2, r3
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	409a      	lsls	r2, r3
 800151a:	0013      	movs	r3, r2
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800152e:	2201      	movs	r2, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	2201      	movs	r2, #1
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2203      	movs	r2, #3
 8001560:	4013      	ands	r3, r2
 8001562:	2b03      	cmp	r3, #3
 8001564:	d017      	beq.n	8001596 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	43da      	mvns	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2203      	movs	r2, #3
 800159c:	4013      	ands	r3, r2
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d123      	bne.n	80015ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	58d3      	ldr	r3, [r2, r3]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2207      	movs	r2, #7
 80015b4:	4013      	ands	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	220f      	movs	r2, #15
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	43da      	mvns	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2107      	movs	r1, #7
 80015ce:	400b      	ands	r3, r1
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	409a      	lsls	r2, r3
 80015d4:	0013      	movs	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	6939      	ldr	r1, [r7, #16]
 80015e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2203      	movs	r2, #3
 8001608:	401a      	ands	r2, r3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	23c0      	movs	r3, #192	; 0xc0
 8001624:	029b      	lsls	r3, r3, #10
 8001626:	4013      	ands	r3, r2
 8001628:	d100      	bne.n	800162c <HAL_GPIO_Init+0x17c>
 800162a:	e09a      	b.n	8001762 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162c:	4b54      	ldr	r3, [pc, #336]	; (8001780 <HAL_GPIO_Init+0x2d0>)
 800162e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001630:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_GPIO_Init+0x2d0>)
 8001632:	2101      	movs	r1, #1
 8001634:	430a      	orrs	r2, r1
 8001636:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001638:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_GPIO_Init+0x2d4>)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	589b      	ldr	r3, [r3, r2]
 8001644:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	2203      	movs	r2, #3
 800164a:	4013      	ands	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	409a      	lsls	r2, r3
 8001652:	0013      	movs	r3, r2
 8001654:	43da      	mvns	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	23a0      	movs	r3, #160	; 0xa0
 8001660:	05db      	lsls	r3, r3, #23
 8001662:	429a      	cmp	r2, r3
 8001664:	d019      	beq.n	800169a <HAL_GPIO_Init+0x1ea>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a47      	ldr	r2, [pc, #284]	; (8001788 <HAL_GPIO_Init+0x2d8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d013      	beq.n	8001696 <HAL_GPIO_Init+0x1e6>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_GPIO_Init+0x2dc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d00d      	beq.n	8001692 <HAL_GPIO_Init+0x1e2>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a45      	ldr	r2, [pc, #276]	; (8001790 <HAL_GPIO_Init+0x2e0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d007      	beq.n	800168e <HAL_GPIO_Init+0x1de>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a44      	ldr	r2, [pc, #272]	; (8001794 <HAL_GPIO_Init+0x2e4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d101      	bne.n	800168a <HAL_GPIO_Init+0x1da>
 8001686:	2305      	movs	r3, #5
 8001688:	e008      	b.n	800169c <HAL_GPIO_Init+0x1ec>
 800168a:	2306      	movs	r3, #6
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x1ec>
 800168e:	2303      	movs	r3, #3
 8001690:	e004      	b.n	800169c <HAL_GPIO_Init+0x1ec>
 8001692:	2302      	movs	r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_Init+0x1ec>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x1ec>
 800169a:	2300      	movs	r3, #0
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	2103      	movs	r1, #3
 80016a0:	400a      	ands	r2, r1
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ac:	4935      	ldr	r1, [pc, #212]	; (8001784 <HAL_GPIO_Init+0x2d4>)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ba:	4b37      	ldr	r3, [pc, #220]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43da      	mvns	r2, r3
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	035b      	lsls	r3, r3, #13
 80016d2:	4013      	ands	r3, r2
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016de:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016e4:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43da      	mvns	r2, r3
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	039b      	lsls	r3, r3, #14
 80016fc:	4013      	ands	r3, r2
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43da      	mvns	r2, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	029b      	lsls	r3, r3, #10
 8001726:	4013      	ands	r3, r2
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43da      	mvns	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	025b      	lsls	r3, r3, #9
 8001750:	4013      	ands	r3, r2
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	40da      	lsrs	r2, r3
 8001770:	1e13      	subs	r3, r2, #0
 8001772:	d000      	beq.n	8001776 <HAL_GPIO_Init+0x2c6>
 8001774:	e6a8      	b.n	80014c8 <HAL_GPIO_Init+0x18>
  }
}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b006      	add	sp, #24
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	40010000 	.word	0x40010000
 8001788:	50000400 	.word	0x50000400
 800178c:	50000800 	.word	0x50000800
 8001790:	50000c00 	.word	0x50000c00
 8001794:	50001c00 	.word	0x50001c00
 8001798:	40010400 	.word	0x40010400

0800179c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	0008      	movs	r0, r1
 80017a6:	0011      	movs	r1, r2
 80017a8:	1cbb      	adds	r3, r7, #2
 80017aa:	1c02      	adds	r2, r0, #0
 80017ac:	801a      	strh	r2, [r3, #0]
 80017ae:	1c7b      	adds	r3, r7, #1
 80017b0:	1c0a      	adds	r2, r1, #0
 80017b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b4:	1c7b      	adds	r3, r7, #1
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017bc:	1cbb      	adds	r3, r7, #2
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80017c4:	e003      	b.n	80017ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80017c6:	1cbb      	adds	r3, r7, #2
 80017c8:	881a      	ldrh	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b002      	add	sp, #8
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	000a      	movs	r2, r1
 80017e0:	1cbb      	adds	r3, r7, #2
 80017e2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017ea:	1cbb      	adds	r3, r7, #2
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4013      	ands	r3, r2
 80017f2:	041a      	lsls	r2, r3, #16
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	1cb9      	adds	r1, r7, #2
 80017fa:	8809      	ldrh	r1, [r1, #0]
 80017fc:	400b      	ands	r3, r1
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	619a      	str	r2, [r3, #24]
}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b004      	add	sp, #16
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	0002      	movs	r2, r0
 8001814:	1dbb      	adds	r3, r7, #6
 8001816:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	1dba      	adds	r2, r7, #6
 800181e:	8812      	ldrh	r2, [r2, #0]
 8001820:	4013      	ands	r3, r2
 8001822:	d008      	beq.n	8001836 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001826:	1dba      	adds	r2, r7, #6
 8001828:	8812      	ldrh	r2, [r2, #0]
 800182a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800182c:	1dbb      	adds	r3, r7, #6
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff f8bf 	bl	80009b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	40010400 	.word	0x40010400

08001844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	f000 fbaf 	bl	8001fb6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001858:	4bcf      	ldr	r3, [pc, #828]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	220c      	movs	r2, #12
 800185e:	4013      	ands	r3, r2
 8001860:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001862:	4bcd      	ldr	r3, [pc, #820]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4013      	ands	r3, r2
 800186c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	4013      	ands	r3, r2
 8001876:	d100      	bne.n	800187a <HAL_RCC_OscConfig+0x36>
 8001878:	e07e      	b.n	8001978 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d007      	beq.n	8001890 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d112      	bne.n	80018ac <HAL_RCC_OscConfig+0x68>
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	025b      	lsls	r3, r3, #9
 800188c:	429a      	cmp	r2, r3
 800188e:	d10d      	bne.n	80018ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	4bc1      	ldr	r3, [pc, #772]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	029b      	lsls	r3, r3, #10
 8001898:	4013      	ands	r3, r2
 800189a:	d100      	bne.n	800189e <HAL_RCC_OscConfig+0x5a>
 800189c:	e06b      	b.n	8001976 <HAL_RCC_OscConfig+0x132>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d167      	bne.n	8001976 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f000 fb85 	bl	8001fb6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	025b      	lsls	r3, r3, #9
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d107      	bne.n	80018c8 <HAL_RCC_OscConfig+0x84>
 80018b8:	4bb7      	ldr	r3, [pc, #732]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4bb6      	ldr	r3, [pc, #728]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	0249      	lsls	r1, r1, #9
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	e027      	b.n	8001918 <HAL_RCC_OscConfig+0xd4>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	23a0      	movs	r3, #160	; 0xa0
 80018ce:	02db      	lsls	r3, r3, #11
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d10e      	bne.n	80018f2 <HAL_RCC_OscConfig+0xae>
 80018d4:	4bb0      	ldr	r3, [pc, #704]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4baf      	ldr	r3, [pc, #700]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	02c9      	lsls	r1, r1, #11
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	4bad      	ldr	r3, [pc, #692]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4bac      	ldr	r3, [pc, #688]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	0249      	lsls	r1, r1, #9
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e012      	b.n	8001918 <HAL_RCC_OscConfig+0xd4>
 80018f2:	4ba9      	ldr	r3, [pc, #676]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4ba8      	ldr	r3, [pc, #672]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80018f8:	49a8      	ldr	r1, [pc, #672]	; (8001b9c <HAL_RCC_OscConfig+0x358>)
 80018fa:	400a      	ands	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	4ba6      	ldr	r3, [pc, #664]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	025b      	lsls	r3, r3, #9
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4ba2      	ldr	r3, [pc, #648]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4ba1      	ldr	r3, [pc, #644]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001912:	49a3      	ldr	r1, [pc, #652]	; (8001ba0 <HAL_RCC_OscConfig+0x35c>)
 8001914:	400a      	ands	r2, r1
 8001916:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d015      	beq.n	800194c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fc32 	bl	8001188 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001928:	e009      	b.n	800193e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192a:	f7ff fc2d 	bl	8001188 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b64      	cmp	r3, #100	; 0x64
 8001936:	d902      	bls.n	800193e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	f000 fb3c 	bl	8001fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800193e:	4b96      	ldr	r3, [pc, #600]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	029b      	lsls	r3, r3, #10
 8001946:	4013      	ands	r3, r2
 8001948:	d0ef      	beq.n	800192a <HAL_RCC_OscConfig+0xe6>
 800194a:	e015      	b.n	8001978 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fc1c 	bl	8001188 <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001956:	f7ff fc17 	bl	8001188 <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b64      	cmp	r3, #100	; 0x64
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e326      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001968:	4b8b      	ldr	r3, [pc, #556]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	029b      	lsls	r3, r3, #10
 8001970:	4013      	ands	r3, r2
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x112>
 8001974:	e000      	b.n	8001978 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001976:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2202      	movs	r2, #2
 800197e:	4013      	ands	r3, r2
 8001980:	d100      	bne.n	8001984 <HAL_RCC_OscConfig+0x140>
 8001982:	e08b      	b.n	8001a9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	2b04      	cmp	r3, #4
 800198e:	d005      	beq.n	800199c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d13e      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1d0>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d13b      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800199c:	4b7e      	ldr	r3, [pc, #504]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2204      	movs	r2, #4
 80019a2:	4013      	ands	r3, r2
 80019a4:	d004      	beq.n	80019b0 <HAL_RCC_OscConfig+0x16c>
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e302      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b79      	ldr	r3, [pc, #484]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4a7b      	ldr	r2, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x360>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	0019      	movs	r1, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	021a      	lsls	r2, r3, #8
 80019c0:	4b75      	ldr	r3, [pc, #468]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019c6:	4b74      	ldr	r3, [pc, #464]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2209      	movs	r2, #9
 80019cc:	4393      	bics	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	4b71      	ldr	r3, [pc, #452]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d8:	f000 fc40 	bl	800225c <HAL_RCC_GetSysClockFreq>
 80019dc:	0001      	movs	r1, r0
 80019de:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	220f      	movs	r2, #15
 80019e6:	4013      	ands	r3, r2
 80019e8:	4a6f      	ldr	r2, [pc, #444]	; (8001ba8 <HAL_RCC_OscConfig+0x364>)
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	000a      	movs	r2, r1
 80019ee:	40da      	lsrs	r2, r3
 80019f0:	4b6e      	ldr	r3, [pc, #440]	; (8001bac <HAL_RCC_OscConfig+0x368>)
 80019f2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80019f4:	4b6e      	ldr	r3, [pc, #440]	; (8001bb0 <HAL_RCC_OscConfig+0x36c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2513      	movs	r5, #19
 80019fa:	197c      	adds	r4, r7, r5
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff fb7d 	bl	80010fc <HAL_InitTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a06:	197b      	adds	r3, r7, r5
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d046      	beq.n	8001a9c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001a0e:	197b      	adds	r3, r7, r5
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	e2d0      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d027      	beq.n	8001a6a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a1a:	4b5f      	ldr	r3, [pc, #380]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2209      	movs	r2, #9
 8001a20:	4393      	bics	r3, r2
 8001a22:	0019      	movs	r1, r3
 8001a24:	4b5c      	ldr	r3, [pc, #368]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fbac 	bl	8001188 <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fba7 	bl	8001188 <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e2b6      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d0f1      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	4b51      	ldr	r3, [pc, #324]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a53      	ldr	r2, [pc, #332]	; (8001ba4 <HAL_RCC_OscConfig+0x360>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	021a      	lsls	r2, r3, #8
 8001a62:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001a64:	430a      	orrs	r2, r1
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	e018      	b.n	8001a9c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001a70:	2101      	movs	r1, #1
 8001a72:	438a      	bics	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fb87 	bl	8001188 <HAL_GetTick>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a80:	f7ff fb82 	bl	8001188 <HAL_GetTick>
 8001a84:	0002      	movs	r2, r0
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e291      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2204      	movs	r2, #4
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d1f1      	bne.n	8001a80 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d100      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x264>
 8001aa6:	e0a1      	b.n	8001bec <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d140      	bne.n	8001b30 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x282>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e277      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac6:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4a3a      	ldr	r2, [pc, #232]	; (8001bb4 <HAL_RCC_OscConfig+0x370>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	0019      	movs	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	0a19      	lsrs	r1, r3, #8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	061a      	lsls	r2, r3, #24
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001aea:	430a      	orrs	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	0b5b      	lsrs	r3, r3, #13
 8001af4:	3301      	adds	r3, #1
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	0212      	lsls	r2, r2, #8
 8001afa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001afc:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	210f      	movs	r1, #15
 8001b04:	400b      	ands	r3, r1
 8001b06:	4928      	ldr	r1, [pc, #160]	; (8001ba8 <HAL_RCC_OscConfig+0x364>)
 8001b08:	5ccb      	ldrb	r3, [r1, r3]
 8001b0a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x368>)
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001b10:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <HAL_RCC_OscConfig+0x36c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2513      	movs	r5, #19
 8001b16:	197c      	adds	r4, r7, r5
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff faef 	bl	80010fc <HAL_InitTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001b22:	197b      	adds	r3, r7, r5
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d060      	beq.n	8001bec <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001b2a:	197b      	adds	r3, r7, r5
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	e242      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d03f      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	0049      	lsls	r1, r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fb1f 	bl	8001188 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b50:	f7ff fb1a 	bl	8001188 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e229      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <HAL_RCC_OscConfig+0x370>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	0a19      	lsrs	r1, r3, #8
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	061a      	lsls	r2, r3, #24
 8001b90:	4b01      	ldr	r3, [pc, #4]	; (8001b98 <HAL_RCC_OscConfig+0x354>)
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	e029      	b.n	8001bec <HAL_RCC_OscConfig+0x3a8>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	fffeffff 	.word	0xfffeffff
 8001ba0:	fffbffff 	.word	0xfffbffff
 8001ba4:	ffffe0ff 	.word	0xffffe0ff
 8001ba8:	080041c4 	.word	0x080041c4
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bb8:	4bbd      	ldr	r3, [pc, #756]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4bbc      	ldr	r3, [pc, #752]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001bbe:	49bd      	ldr	r1, [pc, #756]	; (8001eb4 <HAL_RCC_OscConfig+0x670>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fae0 	bl	8001188 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bce:	f7ff fadb 	bl	8001188 <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e1ea      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001be0:	4bb3      	ldr	r3, [pc, #716]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2208      	movs	r2, #8
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d036      	beq.n	8001c64 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d019      	beq.n	8001c32 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfe:	4bac      	ldr	r3, [pc, #688]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c02:	4bab      	ldr	r3, [pc, #684]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001c04:	2101      	movs	r1, #1
 8001c06:	430a      	orrs	r2, r1
 8001c08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fabd 	bl	8001188 <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c14:	f7ff fab8 	bl	8001188 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1c7      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c26:	4ba2      	ldr	r3, [pc, #648]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d0f1      	beq.n	8001c14 <HAL_RCC_OscConfig+0x3d0>
 8001c30:	e018      	b.n	8001c64 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c32:	4b9f      	ldr	r3, [pc, #636]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c36:	4b9e      	ldr	r3, [pc, #632]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001c38:	2101      	movs	r1, #1
 8001c3a:	438a      	bics	r2, r1
 8001c3c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff faa3 	bl	8001188 <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c48:	f7ff fa9e 	bl	8001188 <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e1ad      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c5a:	4b95      	ldr	r3, [pc, #596]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5e:	2202      	movs	r2, #2
 8001c60:	4013      	ands	r3, r2
 8001c62:	d1f1      	bne.n	8001c48 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d100      	bne.n	8001c70 <HAL_RCC_OscConfig+0x42c>
 8001c6e:	e0ae      	b.n	8001dce <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c70:	2027      	movs	r0, #39	; 0x27
 8001c72:	183b      	adds	r3, r7, r0
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c78:	4b8d      	ldr	r3, [pc, #564]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	055b      	lsls	r3, r3, #21
 8001c80:	4013      	ands	r3, r2
 8001c82:	d109      	bne.n	8001c98 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c84:	4b8a      	ldr	r3, [pc, #552]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c88:	4b89      	ldr	r3, [pc, #548]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001c8a:	2180      	movs	r1, #128	; 0x80
 8001c8c:	0549      	lsls	r1, r1, #21
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c92:	183b      	adds	r3, r7, r0
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	4b87      	ldr	r3, [pc, #540]	; (8001eb8 <HAL_RCC_OscConfig+0x674>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d11a      	bne.n	8001cda <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca4:	4b84      	ldr	r3, [pc, #528]	; (8001eb8 <HAL_RCC_OscConfig+0x674>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b83      	ldr	r3, [pc, #524]	; (8001eb8 <HAL_RCC_OscConfig+0x674>)
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	0049      	lsls	r1, r1, #1
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb2:	f7ff fa69 	bl	8001188 <HAL_GetTick>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbc:	f7ff fa64 	bl	8001188 <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	; 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e173      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cce:	4b7a      	ldr	r3, [pc, #488]	; (8001eb8 <HAL_RCC_OscConfig+0x674>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4b2>
 8001ce6:	4b72      	ldr	r3, [pc, #456]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001ce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cea:	4b71      	ldr	r3, [pc, #452]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	0049      	lsls	r1, r1, #1
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	651a      	str	r2, [r3, #80]	; 0x50
 8001cf4:	e031      	b.n	8001d5a <HAL_RCC_OscConfig+0x516>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4d4>
 8001cfe:	4b6c      	ldr	r3, [pc, #432]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d02:	4b6b      	ldr	r3, [pc, #428]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d04:	496b      	ldr	r1, [pc, #428]	; (8001eb4 <HAL_RCC_OscConfig+0x670>)
 8001d06:	400a      	ands	r2, r1
 8001d08:	651a      	str	r2, [r3, #80]	; 0x50
 8001d0a:	4b69      	ldr	r3, [pc, #420]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d0e:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d10:	496a      	ldr	r1, [pc, #424]	; (8001ebc <HAL_RCC_OscConfig+0x678>)
 8001d12:	400a      	ands	r2, r1
 8001d14:	651a      	str	r2, [r3, #80]	; 0x50
 8001d16:	e020      	b.n	8001d5a <HAL_RCC_OscConfig+0x516>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	23a0      	movs	r3, #160	; 0xa0
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d10e      	bne.n	8001d42 <HAL_RCC_OscConfig+0x4fe>
 8001d24:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d28:	4b61      	ldr	r3, [pc, #388]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	00c9      	lsls	r1, r1, #3
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	651a      	str	r2, [r3, #80]	; 0x50
 8001d32:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d36:	4b5e      	ldr	r3, [pc, #376]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0049      	lsls	r1, r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	651a      	str	r2, [r3, #80]	; 0x50
 8001d40:	e00b      	b.n	8001d5a <HAL_RCC_OscConfig+0x516>
 8001d42:	4b5b      	ldr	r3, [pc, #364]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d46:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d48:	495a      	ldr	r1, [pc, #360]	; (8001eb4 <HAL_RCC_OscConfig+0x670>)
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	651a      	str	r2, [r3, #80]	; 0x50
 8001d4e:	4b58      	ldr	r3, [pc, #352]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d52:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d54:	4959      	ldr	r1, [pc, #356]	; (8001ebc <HAL_RCC_OscConfig+0x678>)
 8001d56:	400a      	ands	r2, r1
 8001d58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d015      	beq.n	8001d8e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7ff fa11 	bl	8001188 <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d6a:	e009      	b.n	8001d80 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fa0c 	bl	8001188 <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	4a52      	ldr	r2, [pc, #328]	; (8001ec0 <HAL_RCC_OscConfig+0x67c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e11a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d80:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001d82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d0ef      	beq.n	8001d6c <HAL_RCC_OscConfig+0x528>
 8001d8c:	e014      	b.n	8001db8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff f9fb 	bl	8001188 <HAL_GetTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d96:	e009      	b.n	8001dac <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d98:	f7ff f9f6 	bl	8001188 <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	4a47      	ldr	r2, [pc, #284]	; (8001ec0 <HAL_RCC_OscConfig+0x67c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e104      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dac:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001dae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4013      	ands	r3, r2
 8001db6:	d1ef      	bne.n	8001d98 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001db8:	2327      	movs	r3, #39	; 0x27
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d105      	bne.n	8001dce <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001dc8:	493e      	ldr	r1, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x680>)
 8001dca:	400a      	ands	r2, r1
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d049      	beq.n	8001e6c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d026      	beq.n	8001e2e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001de0:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001df2:	2101      	movs	r1, #1
 8001df4:	430a      	orrs	r2, r1
 8001df6:	635a      	str	r2, [r3, #52]	; 0x34
 8001df8:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <HAL_RCC_OscConfig+0x684>)
 8001dfa:	6a1a      	ldr	r2, [r3, #32]
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_RCC_OscConfig+0x684>)
 8001dfe:	2180      	movs	r1, #128	; 0x80
 8001e00:	0189      	lsls	r1, r1, #6
 8001e02:	430a      	orrs	r2, r1
 8001e04:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff f9bf 	bl	8001188 <HAL_GetTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e10:	f7ff f9ba 	bl	8001188 <HAL_GetTick>
 8001e14:	0002      	movs	r2, r0
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0c9      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e22:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2202      	movs	r2, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d0f1      	beq.n	8001e10 <HAL_RCC_OscConfig+0x5cc>
 8001e2c:	e01e      	b.n	8001e6c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001e34:	2101      	movs	r1, #1
 8001e36:	438a      	bics	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <HAL_RCC_OscConfig+0x684>)
 8001e3c:	6a1a      	ldr	r2, [r3, #32]
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <HAL_RCC_OscConfig+0x684>)
 8001e40:	4922      	ldr	r1, [pc, #136]	; (8001ecc <HAL_RCC_OscConfig+0x688>)
 8001e42:	400a      	ands	r2, r1
 8001e44:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7ff f99f 	bl	8001188 <HAL_GetTick>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e50:	f7ff f99a 	bl	8001188 <HAL_GetTick>
 8001e54:	0002      	movs	r2, r0
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e0a9      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2202      	movs	r2, #2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d1f1      	bne.n	8001e50 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d100      	bne.n	8001e76 <HAL_RCC_OscConfig+0x632>
 8001e74:	e09e      	b.n	8001fb4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d100      	bne.n	8001e7e <HAL_RCC_OscConfig+0x63a>
 8001e7c:	e077      	b.n	8001f6e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d158      	bne.n	8001f38 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_OscConfig+0x66c>)
 8001e8c:	4910      	ldr	r1, [pc, #64]	; (8001ed0 <HAL_RCC_OscConfig+0x68c>)
 8001e8e:	400a      	ands	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7ff f979 	bl	8001188 <HAL_GetTick>
 8001e96:	0003      	movs	r3, r0
 8001e98:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e9a:	e01b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff f974 	bl	8001188 <HAL_GetTick>
 8001ea0:	0002      	movs	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d914      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e083      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	fffffeff 	.word	0xfffffeff
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	fffffbff 	.word	0xfffffbff
 8001ec0:	00001388 	.word	0x00001388
 8001ec4:	efffffff 	.word	0xefffffff
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	ffffdfff 	.word	0xffffdfff
 8001ed0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ed4:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <HAL_RCC_OscConfig+0x77c>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	049b      	lsls	r3, r3, #18
 8001edc:	4013      	ands	r3, r2
 8001ede:	d1dd      	bne.n	8001e9c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee0:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <HAL_RCC_OscConfig+0x77c>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4a37      	ldr	r2, [pc, #220]	; (8001fc4 <HAL_RCC_OscConfig+0x780>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	0019      	movs	r1, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_RCC_OscConfig+0x77c>)
 8001efc:	430a      	orrs	r2, r1
 8001efe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f00:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <HAL_RCC_OscConfig+0x77c>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <HAL_RCC_OscConfig+0x77c>)
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	0449      	lsls	r1, r1, #17
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff f93b 	bl	8001188 <HAL_GetTick>
 8001f12:	0003      	movs	r3, r0
 8001f14:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff f936 	bl	8001188 <HAL_GetTick>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e045      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f2a:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <HAL_RCC_OscConfig+0x77c>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	049b      	lsls	r3, r3, #18
 8001f32:	4013      	ands	r3, r2
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x6d4>
 8001f36:	e03d      	b.n	8001fb4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <HAL_RCC_OscConfig+0x77c>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_RCC_OscConfig+0x77c>)
 8001f3e:	4922      	ldr	r1, [pc, #136]	; (8001fc8 <HAL_RCC_OscConfig+0x784>)
 8001f40:	400a      	ands	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff f920 	bl	8001188 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7ff f91b 	bl	8001188 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e02a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_RCC_OscConfig+0x77c>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	049b      	lsls	r3, r3, #18
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x70a>
 8001f6c:	e022      	b.n	8001fb4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e01d      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_RCC_OscConfig+0x77c>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	025b      	lsls	r3, r3, #9
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d10f      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	23f0      	movs	r3, #240	; 0xf0
 8001f94:	039b      	lsls	r3, r3, #14
 8001f96:	401a      	ands	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	23c0      	movs	r3, #192	; 0xc0
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b00a      	add	sp, #40	; 0x28
 8001fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	ff02ffff 	.word	0xff02ffff
 8001fc8:	feffffff 	.word	0xfeffffff

08001fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b5b0      	push	{r4, r5, r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e128      	b.n	8002232 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b96      	ldr	r3, [pc, #600]	; (800223c <HAL_RCC_ClockConfig+0x270>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d91e      	bls.n	800202c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b93      	ldr	r3, [pc, #588]	; (800223c <HAL_RCC_ClockConfig+0x270>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4393      	bics	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	4b90      	ldr	r3, [pc, #576]	; (800223c <HAL_RCC_ClockConfig+0x270>)
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002000:	f7ff f8c2 	bl	8001188 <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002008:	e009      	b.n	800201e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200a:	f7ff f8bd 	bl	8001188 <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	4a8a      	ldr	r2, [pc, #552]	; (8002240 <HAL_RCC_ClockConfig+0x274>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e109      	b.n	8002232 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b87      	ldr	r3, [pc, #540]	; (800223c <HAL_RCC_ClockConfig+0x270>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2201      	movs	r2, #1
 8002024:	4013      	ands	r3, r2
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d1ee      	bne.n	800200a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002036:	4b83      	ldr	r3, [pc, #524]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	22f0      	movs	r2, #240	; 0xf0
 800203c:	4393      	bics	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	4b7f      	ldr	r3, [pc, #508]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 8002046:	430a      	orrs	r2, r1
 8002048:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2201      	movs	r2, #1
 8002050:	4013      	ands	r3, r2
 8002052:	d100      	bne.n	8002056 <HAL_RCC_ClockConfig+0x8a>
 8002054:	e089      	b.n	800216a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800205e:	4b79      	ldr	r3, [pc, #484]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	029b      	lsls	r3, r3, #10
 8002066:	4013      	ands	r3, r2
 8002068:	d120      	bne.n	80020ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0e1      	b.n	8002232 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002076:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	049b      	lsls	r3, r3, #18
 800207e:	4013      	ands	r3, r2
 8002080:	d114      	bne.n	80020ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0d5      	b.n	8002232 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d106      	bne.n	800209c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800208e:	4b6d      	ldr	r3, [pc, #436]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2204      	movs	r2, #4
 8002094:	4013      	ands	r3, r2
 8002096:	d109      	bne.n	80020ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0ca      	b.n	8002232 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800209c:	4b69      	ldr	r3, [pc, #420]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4013      	ands	r3, r2
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0c2      	b.n	8002232 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ac:	4b65      	ldr	r3, [pc, #404]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2203      	movs	r2, #3
 80020b2:	4393      	bics	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4b62      	ldr	r3, [pc, #392]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 80020bc:	430a      	orrs	r2, r1
 80020be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c0:	f7ff f862 	bl	8001188 <HAL_GetTick>
 80020c4:	0003      	movs	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d111      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d0:	e009      	b.n	80020e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d2:	f7ff f859 	bl	8001188 <HAL_GetTick>
 80020d6:	0002      	movs	r2, r0
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	4a58      	ldr	r2, [pc, #352]	; (8002240 <HAL_RCC_ClockConfig+0x274>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e0a5      	b.n	8002232 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e6:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	220c      	movs	r2, #12
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d1ef      	bne.n	80020d2 <HAL_RCC_ClockConfig+0x106>
 80020f2:	e03a      	b.n	800216a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d111      	bne.n	8002120 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fc:	e009      	b.n	8002112 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fe:	f7ff f843 	bl	8001188 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	4a4d      	ldr	r2, [pc, #308]	; (8002240 <HAL_RCC_ClockConfig+0x274>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e08f      	b.n	8002232 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002112:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	220c      	movs	r2, #12
 8002118:	4013      	ands	r3, r2
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d1ef      	bne.n	80020fe <HAL_RCC_ClockConfig+0x132>
 800211e:	e024      	b.n	800216a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d11b      	bne.n	8002160 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002128:	e009      	b.n	800213e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212a:	f7ff f82d 	bl	8001188 <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	4a42      	ldr	r2, [pc, #264]	; (8002240 <HAL_RCC_ClockConfig+0x274>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e079      	b.n	8002232 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800213e:	4b41      	ldr	r3, [pc, #260]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	220c      	movs	r2, #12
 8002144:	4013      	ands	r3, r2
 8002146:	2b04      	cmp	r3, #4
 8002148:	d1ef      	bne.n	800212a <HAL_RCC_ClockConfig+0x15e>
 800214a:	e00e      	b.n	800216a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214c:	f7ff f81c 	bl	8001188 <HAL_GetTick>
 8002150:	0002      	movs	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	4a3a      	ldr	r2, [pc, #232]	; (8002240 <HAL_RCC_ClockConfig+0x274>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e068      	b.n	8002232 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002160:	4b38      	ldr	r3, [pc, #224]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	220c      	movs	r2, #12
 8002166:	4013      	ands	r3, r2
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216a:	4b34      	ldr	r3, [pc, #208]	; (800223c <HAL_RCC_ClockConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2201      	movs	r2, #1
 8002170:	4013      	ands	r3, r2
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d21e      	bcs.n	80021b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002178:	4b30      	ldr	r3, [pc, #192]	; (800223c <HAL_RCC_ClockConfig+0x270>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2201      	movs	r2, #1
 800217e:	4393      	bics	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	4b2e      	ldr	r3, [pc, #184]	; (800223c <HAL_RCC_ClockConfig+0x270>)
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800218a:	f7fe fffd 	bl	8001188 <HAL_GetTick>
 800218e:	0003      	movs	r3, r0
 8002190:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	e009      	b.n	80021a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002194:	f7fe fff8 	bl	8001188 <HAL_GetTick>
 8002198:	0002      	movs	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	4a28      	ldr	r2, [pc, #160]	; (8002240 <HAL_RCC_ClockConfig+0x274>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e044      	b.n	8002232 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a8:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_ClockConfig+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2201      	movs	r2, #1
 80021ae:	4013      	ands	r3, r2
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d1ee      	bne.n	8002194 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2204      	movs	r2, #4
 80021bc:	4013      	ands	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a20      	ldr	r2, [pc, #128]	; (8002248 <HAL_RCC_ClockConfig+0x27c>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2208      	movs	r2, #8
 80021da:	4013      	ands	r3, r2
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	4a1a      	ldr	r2, [pc, #104]	; (800224c <HAL_RCC_ClockConfig+0x280>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	00da      	lsls	r2, r3, #3
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021f4:	f000 f832 	bl	800225c <HAL_RCC_GetSysClockFreq>
 80021f8:	0001      	movs	r1, r0
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_RCC_ClockConfig+0x278>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	220f      	movs	r2, #15
 8002202:	4013      	ands	r3, r2
 8002204:	4a12      	ldr	r2, [pc, #72]	; (8002250 <HAL_RCC_ClockConfig+0x284>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	000a      	movs	r2, r1
 800220a:	40da      	lsrs	r2, r3
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_RCC_ClockConfig+0x288>)
 800220e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_RCC_ClockConfig+0x28c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	250b      	movs	r5, #11
 8002216:	197c      	adds	r4, r7, r5
 8002218:	0018      	movs	r0, r3
 800221a:	f7fe ff6f 	bl	80010fc <HAL_InitTick>
 800221e:	0003      	movs	r3, r0
 8002220:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002222:	197b      	adds	r3, r7, r5
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800222a:	197b      	adds	r3, r7, r5
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	e000      	b.n	8002232 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	b004      	add	sp, #16
 8002238:	bdb0      	pop	{r4, r5, r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	40022000 	.word	0x40022000
 8002240:	00001388 	.word	0x00001388
 8002244:	40021000 	.word	0x40021000
 8002248:	fffff8ff 	.word	0xfffff8ff
 800224c:	ffffc7ff 	.word	0xffffc7ff
 8002250:	080041c4 	.word	0x080041c4
 8002254:	20000004 	.word	0x20000004
 8002258:	20000008 	.word	0x20000008

0800225c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	b5b0      	push	{r4, r5, r7, lr}
 800225e:	b08e      	sub	sp, #56	; 0x38
 8002260:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002262:	4b4c      	ldr	r3, [pc, #304]	; (8002394 <HAL_RCC_GetSysClockFreq+0x138>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226a:	230c      	movs	r3, #12
 800226c:	4013      	ands	r3, r2
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d014      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x40>
 8002272:	d900      	bls.n	8002276 <HAL_RCC_GetSysClockFreq+0x1a>
 8002274:	e07b      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x112>
 8002276:	2b04      	cmp	r3, #4
 8002278:	d002      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x24>
 800227a:	2b08      	cmp	r3, #8
 800227c:	d00b      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x3a>
 800227e:	e076      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002280:	4b44      	ldr	r3, [pc, #272]	; (8002394 <HAL_RCC_GetSysClockFreq+0x138>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2210      	movs	r2, #16
 8002286:	4013      	ands	r3, r2
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800228a:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCC_GetSysClockFreq+0x13c>)
 800228c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800228e:	e07c      	b.n	800238a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002290:	4b42      	ldr	r3, [pc, #264]	; (800239c <HAL_RCC_GetSysClockFreq+0x140>)
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002294:	e079      	b.n	800238a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002296:	4b42      	ldr	r3, [pc, #264]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800229a:	e076      	b.n	800238a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	0c9a      	lsrs	r2, r3, #18
 80022a0:	230f      	movs	r3, #15
 80022a2:	401a      	ands	r2, r3
 80022a4:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x148>)
 80022a6:	5c9b      	ldrb	r3, [r3, r2]
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	0d9a      	lsrs	r2, r3, #22
 80022ae:	2303      	movs	r3, #3
 80022b0:	4013      	ands	r3, r2
 80022b2:	3301      	adds	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_RCC_GetSysClockFreq+0x138>)
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	025b      	lsls	r3, r3, #9
 80022be:	4013      	ands	r3, r2
 80022c0:	d01a      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	4a35      	ldr	r2, [pc, #212]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x144>)
 80022cc:	2300      	movs	r3, #0
 80022ce:	69b8      	ldr	r0, [r7, #24]
 80022d0:	69f9      	ldr	r1, [r7, #28]
 80022d2:	f7fe f8b9 	bl	8000448 <__aeabi_lmul>
 80022d6:	0002      	movs	r2, r0
 80022d8:	000b      	movs	r3, r1
 80022da:	0010      	movs	r0, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f7fe f88d 	bl	8000408 <__aeabi_uldivmod>
 80022ee:	0002      	movs	r2, r0
 80022f0:	000b      	movs	r3, r1
 80022f2:	0013      	movs	r3, r2
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
 80022f6:	e037      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022f8:	4b26      	ldr	r3, [pc, #152]	; (8002394 <HAL_RCC_GetSysClockFreq+0x138>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2210      	movs	r2, #16
 80022fe:	4013      	ands	r3, r2
 8002300:	d01a      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4a23      	ldr	r2, [pc, #140]	; (8002398 <HAL_RCC_GetSysClockFreq+0x13c>)
 800230c:	2300      	movs	r3, #0
 800230e:	68b8      	ldr	r0, [r7, #8]
 8002310:	68f9      	ldr	r1, [r7, #12]
 8002312:	f7fe f899 	bl	8000448 <__aeabi_lmul>
 8002316:	0002      	movs	r2, r0
 8002318:	000b      	movs	r3, r1
 800231a:	0010      	movs	r0, r2
 800231c:	0019      	movs	r1, r3
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f7fe f86d 	bl	8000408 <__aeabi_uldivmod>
 800232e:	0002      	movs	r2, r0
 8002330:	000b      	movs	r3, r1
 8002332:	0013      	movs	r3, r2
 8002334:	637b      	str	r3, [r7, #52]	; 0x34
 8002336:	e017      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	0018      	movs	r0, r3
 800233c:	2300      	movs	r3, #0
 800233e:	0019      	movs	r1, r3
 8002340:	4a16      	ldr	r2, [pc, #88]	; (800239c <HAL_RCC_GetSysClockFreq+0x140>)
 8002342:	2300      	movs	r3, #0
 8002344:	f7fe f880 	bl	8000448 <__aeabi_lmul>
 8002348:	0002      	movs	r2, r0
 800234a:	000b      	movs	r3, r1
 800234c:	0010      	movs	r0, r2
 800234e:	0019      	movs	r1, r3
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	001c      	movs	r4, r3
 8002354:	2300      	movs	r3, #0
 8002356:	001d      	movs	r5, r3
 8002358:	0022      	movs	r2, r4
 800235a:	002b      	movs	r3, r5
 800235c:	f7fe f854 	bl	8000408 <__aeabi_uldivmod>
 8002360:	0002      	movs	r2, r0
 8002362:	000b      	movs	r3, r1
 8002364:	0013      	movs	r3, r2
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800236c:	e00d      	b.n	800238a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_GetSysClockFreq+0x138>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	0b5b      	lsrs	r3, r3, #13
 8002374:	2207      	movs	r2, #7
 8002376:	4013      	ands	r3, r2
 8002378:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	3301      	adds	r3, #1
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	0212      	lsls	r2, r2, #8
 8002382:	409a      	lsls	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002388:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b00e      	add	sp, #56	; 0x38
 8002392:	bdb0      	pop	{r4, r5, r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	003d0900 	.word	0x003d0900
 800239c:	00f42400 	.word	0x00f42400
 80023a0:	007a1200 	.word	0x007a1200
 80023a4:	080041dc 	.word	0x080041dc

080023a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	20000004 	.word	0x20000004

080023bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023c0:	f7ff fff2 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023c4:	0001      	movs	r1, r0
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	2207      	movs	r2, #7
 80023ce:	4013      	ands	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	40d9      	lsrs	r1, r3
 80023d6:	000b      	movs	r3, r1
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	40021000 	.word	0x40021000
 80023e4:	080041d4 	.word	0x080041d4

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023ec:	f7ff ffdc 	bl	80023a8 <HAL_RCC_GetHCLKFreq>
 80023f0:	0001      	movs	r1, r0
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	0adb      	lsrs	r3, r3, #11
 80023f8:	2207      	movs	r2, #7
 80023fa:	4013      	ands	r3, r2
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	40d9      	lsrs	r1, r3
 8002402:	000b      	movs	r3, r1
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	40021000 	.word	0x40021000
 8002410:	080041d4 	.word	0x080041d4

08002414 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800241c:	2317      	movs	r3, #23
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2220      	movs	r2, #32
 800242a:	4013      	ands	r3, r2
 800242c:	d106      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	4013      	ands	r3, r2
 8002438:	d100      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800243a:	e104      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243c:	4bb1      	ldr	r3, [pc, #708]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800243e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	055b      	lsls	r3, r3, #21
 8002444:	4013      	ands	r3, r2
 8002446:	d10a      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	4bae      	ldr	r3, [pc, #696]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800244a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800244c:	4bad      	ldr	r3, [pc, #692]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	0549      	lsls	r1, r1, #21
 8002452:	430a      	orrs	r2, r1
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002456:	2317      	movs	r3, #23
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245e:	4baa      	ldr	r3, [pc, #680]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4013      	ands	r3, r2
 8002468:	d11a      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246a:	4ba7      	ldr	r3, [pc, #668]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4ba6      	ldr	r3, [pc, #664]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	0049      	lsls	r1, r1, #1
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002478:	f7fe fe86 	bl	8001188 <HAL_GetTick>
 800247c:	0003      	movs	r3, r0
 800247e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	e008      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002482:	f7fe fe81 	bl	8001188 <HAL_GetTick>
 8002486:	0002      	movs	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b64      	cmp	r3, #100	; 0x64
 800248e:	d901      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e133      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	4b9c      	ldr	r3, [pc, #624]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4013      	ands	r3, r2
 800249e:	d0f0      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80024a0:	4b98      	ldr	r3, [pc, #608]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	23c0      	movs	r3, #192	; 0xc0
 80024a6:	039b      	lsls	r3, r3, #14
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	23c0      	movs	r3, #192	; 0xc0
 80024b2:	039b      	lsls	r3, r3, #14
 80024b4:	4013      	ands	r3, r2
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d107      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	23c0      	movs	r3, #192	; 0xc0
 80024c2:	039b      	lsls	r3, r3, #14
 80024c4:	4013      	ands	r3, r2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d013      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	23c0      	movs	r3, #192	; 0xc0
 80024d2:	029b      	lsls	r3, r3, #10
 80024d4:	401a      	ands	r2, r3
 80024d6:	23c0      	movs	r3, #192	; 0xc0
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	429a      	cmp	r2, r3
 80024dc:	d10a      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024de:	4b89      	ldr	r3, [pc, #548]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	029b      	lsls	r3, r3, #10
 80024e6:	401a      	ands	r2, r3
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	029b      	lsls	r3, r3, #10
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d101      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e103      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80024f4:	4b83      	ldr	r3, [pc, #524]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024f8:	23c0      	movs	r3, #192	; 0xc0
 80024fa:	029b      	lsls	r3, r3, #10
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d049      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	23c0      	movs	r3, #192	; 0xc0
 800250c:	029b      	lsls	r3, r3, #10
 800250e:	4013      	ands	r3, r2
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	429a      	cmp	r2, r3
 8002514:	d004      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2220      	movs	r2, #32
 800251c:	4013      	ands	r3, r2
 800251e:	d10d      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	23c0      	movs	r3, #192	; 0xc0
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	4013      	ands	r3, r2
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d034      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	4013      	ands	r3, r2
 800253a:	d02e      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800253c:	4b71      	ldr	r3, [pc, #452]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002540:	4a72      	ldr	r2, [pc, #456]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002542:	4013      	ands	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002546:	4b6f      	ldr	r3, [pc, #444]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002548:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800254a:	4b6e      	ldr	r3, [pc, #440]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0309      	lsls	r1, r1, #12
 8002550:	430a      	orrs	r2, r1
 8002552:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002554:	4b6b      	ldr	r3, [pc, #428]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002558:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800255a:	496d      	ldr	r1, [pc, #436]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800255c:	400a      	ands	r2, r1
 800255e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4013      	ands	r3, r2
 800256e:	d014      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe fe0a 	bl	8001188 <HAL_GetTick>
 8002574:	0003      	movs	r3, r0
 8002576:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002578:	e009      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe fe05 	bl	8001188 <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	4a63      	ldr	r2, [pc, #396]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e0b6      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800258e:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4013      	ands	r3, r2
 8002598:	d0ef      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	4013      	ands	r3, r2
 80025a4:	d01f      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	23c0      	movs	r3, #192	; 0xc0
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	401a      	ands	r2, r3
 80025b0:	23c0      	movs	r3, #192	; 0xc0
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80025b8:	4b52      	ldr	r3, [pc, #328]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a56      	ldr	r2, [pc, #344]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025be:	4013      	ands	r3, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	23c0      	movs	r3, #192	; 0xc0
 80025c8:	039b      	lsls	r3, r3, #14
 80025ca:	401a      	ands	r2, r3
 80025cc:	4b4d      	ldr	r3, [pc, #308]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025ce:	430a      	orrs	r2, r1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	23c0      	movs	r3, #192	; 0xc0
 80025dc:	029b      	lsls	r3, r3, #10
 80025de:	401a      	ands	r2, r3
 80025e0:	4b48      	ldr	r3, [pc, #288]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2220      	movs	r2, #32
 80025ec:	4013      	ands	r3, r2
 80025ee:	d01f      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	23c0      	movs	r3, #192	; 0xc0
 80025f6:	029b      	lsls	r3, r3, #10
 80025f8:	401a      	ands	r2, r3
 80025fa:	23c0      	movs	r3, #192	; 0xc0
 80025fc:	029b      	lsls	r3, r3, #10
 80025fe:	429a      	cmp	r2, r3
 8002600:	d10c      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002602:	4b40      	ldr	r3, [pc, #256]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a44      	ldr	r2, [pc, #272]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002608:	4013      	ands	r3, r2
 800260a:	0019      	movs	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	23c0      	movs	r3, #192	; 0xc0
 8002612:	039b      	lsls	r3, r3, #14
 8002614:	401a      	ands	r2, r3
 8002616:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	4b39      	ldr	r3, [pc, #228]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800261e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	23c0      	movs	r3, #192	; 0xc0
 8002626:	029b      	lsls	r3, r3, #10
 8002628:	401a      	ands	r2, r3
 800262a:	4b36      	ldr	r3, [pc, #216]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800262c:	430a      	orrs	r2, r1
 800262e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002630:	2317      	movs	r3, #23
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d105      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263a:	4b32      	ldr	r3, [pc, #200]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800263c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263e:	4b31      	ldr	r3, [pc, #196]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002640:	4936      	ldr	r1, [pc, #216]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002642:	400a      	ands	r2, r1
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2201      	movs	r2, #1
 800264c:	4013      	ands	r3, r2
 800264e:	d009      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002650:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002654:	2203      	movs	r2, #3
 8002656:	4393      	bics	r3, r2
 8002658:	0019      	movs	r1, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	4b29      	ldr	r3, [pc, #164]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002660:	430a      	orrs	r2, r1
 8002662:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2202      	movs	r2, #2
 800266a:	4013      	ands	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800266e:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	220c      	movs	r2, #12
 8002674:	4393      	bics	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800267e:	430a      	orrs	r2, r1
 8002680:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2204      	movs	r2, #4
 8002688:	4013      	ands	r3, r2
 800268a:	d009      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	4a23      	ldr	r2, [pc, #140]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002692:	4013      	ands	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800269c:	430a      	orrs	r2, r1
 800269e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2208      	movs	r2, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	d009      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	0019      	movs	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026ba:	430a      	orrs	r2, r1
 80026bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	4013      	ands	r3, r2
 80026c6:	d009      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	4a16      	ldr	r2, [pc, #88]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1a      	ldr	r2, [r3, #32]
 80026d6:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026d8:	430a      	orrs	r2, r1
 80026da:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2280      	movs	r2, #128	; 0x80
 80026e2:	4013      	ands	r3, r2
 80026e4:	d009      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	0019      	movs	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69da      	ldr	r2, [r3, #28]
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026f6:	430a      	orrs	r2, r1
 80026f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	b006      	add	sp, #24
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	40007000 	.word	0x40007000
 800270c:	fffcffff 	.word	0xfffcffff
 8002710:	fff7ffff 	.word	0xfff7ffff
 8002714:	00001388 	.word	0x00001388
 8002718:	ffcfffff 	.word	0xffcfffff
 800271c:	efffffff 	.word	0xefffffff
 8002720:	fffff3ff 	.word	0xfffff3ff
 8002724:	ffffcfff 	.word	0xffffcfff
 8002728:	fbffffff 	.word	0xfbffffff
 800272c:	fff3ffff 	.word	0xfff3ffff

08002730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2239      	movs	r2, #57	; 0x39
 800273c:	5c9b      	ldrb	r3, [r3, r2]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d001      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e036      	b.n	80027b6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2239      	movs	r2, #57	; 0x39
 800274c:	2102      	movs	r1, #2
 800274e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2101      	movs	r1, #1
 800275c:	430a      	orrs	r2, r1
 800275e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	05db      	lsls	r3, r3, #23
 8002768:	429a      	cmp	r2, r3
 800276a:	d009      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x50>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <HAL_TIM_Base_Start_IT+0x90>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x50>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <HAL_TIM_Base_Start_IT+0x94>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d111      	bne.n	80027a4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2207      	movs	r2, #7
 8002788:	4013      	ands	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b06      	cmp	r3, #6
 8002790:	d010      	beq.n	80027b4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	e007      	b.n	80027b4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2101      	movs	r1, #1
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b004      	add	sp, #16
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	40010800 	.word	0x40010800
 80027c4:	40011400 	.word	0x40011400

080027c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e032      	b.n	8002840 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2239      	movs	r2, #57	; 0x39
 80027de:	5c9b      	ldrb	r3, [r3, r2]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d107      	bne.n	80027f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2238      	movs	r2, #56	; 0x38
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fe fb47 	bl	8000e84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2239      	movs	r2, #57	; 0x39
 80027fa:	2102      	movs	r1, #2
 80027fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	0019      	movs	r1, r3
 8002808:	0010      	movs	r0, r2
 800280a:	f000 f96f 	bl	8002aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	223e      	movs	r2, #62	; 0x3e
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	223a      	movs	r2, #58	; 0x3a
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	223b      	movs	r2, #59	; 0x3b
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	223c      	movs	r2, #60	; 0x3c
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	223d      	movs	r2, #61	; 0x3d
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2239      	movs	r2, #57	; 0x39
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d108      	bne.n	800286a <HAL_TIM_PWM_Start+0x22>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	223a      	movs	r2, #58	; 0x3a
 800285c:	5c9b      	ldrb	r3, [r3, r2]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	1e5a      	subs	r2, r3, #1
 8002864:	4193      	sbcs	r3, r2
 8002866:	b2db      	uxtb	r3, r3
 8002868:	e01f      	b.n	80028aa <HAL_TIM_PWM_Start+0x62>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d108      	bne.n	8002882 <HAL_TIM_PWM_Start+0x3a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	223b      	movs	r2, #59	; 0x3b
 8002874:	5c9b      	ldrb	r3, [r3, r2]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	1e5a      	subs	r2, r3, #1
 800287c:	4193      	sbcs	r3, r2
 800287e:	b2db      	uxtb	r3, r3
 8002880:	e013      	b.n	80028aa <HAL_TIM_PWM_Start+0x62>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d108      	bne.n	800289a <HAL_TIM_PWM_Start+0x52>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	223c      	movs	r2, #60	; 0x3c
 800288c:	5c9b      	ldrb	r3, [r3, r2]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	1e5a      	subs	r2, r3, #1
 8002894:	4193      	sbcs	r3, r2
 8002896:	b2db      	uxtb	r3, r3
 8002898:	e007      	b.n	80028aa <HAL_TIM_PWM_Start+0x62>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	223d      	movs	r2, #61	; 0x3d
 800289e:	5c9b      	ldrb	r3, [r3, r2]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	1e5a      	subs	r2, r3, #1
 80028a6:	4193      	sbcs	r3, r2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e04d      	b.n	800294e <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d104      	bne.n	80028c2 <HAL_TIM_PWM_Start+0x7a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	223a      	movs	r2, #58	; 0x3a
 80028bc:	2102      	movs	r1, #2
 80028be:	5499      	strb	r1, [r3, r2]
 80028c0:	e013      	b.n	80028ea <HAL_TIM_PWM_Start+0xa2>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d104      	bne.n	80028d2 <HAL_TIM_PWM_Start+0x8a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	223b      	movs	r2, #59	; 0x3b
 80028cc:	2102      	movs	r1, #2
 80028ce:	5499      	strb	r1, [r3, r2]
 80028d0:	e00b      	b.n	80028ea <HAL_TIM_PWM_Start+0xa2>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d104      	bne.n	80028e2 <HAL_TIM_PWM_Start+0x9a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	223c      	movs	r2, #60	; 0x3c
 80028dc:	2102      	movs	r1, #2
 80028de:	5499      	strb	r1, [r3, r2]
 80028e0:	e003      	b.n	80028ea <HAL_TIM_PWM_Start+0xa2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	223d      	movs	r2, #61	; 0x3d
 80028e6:	2102      	movs	r1, #2
 80028e8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6839      	ldr	r1, [r7, #0]
 80028f0:	2201      	movs	r2, #1
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 fa52 	bl	8002d9c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	05db      	lsls	r3, r3, #23
 8002900:	429a      	cmp	r2, r3
 8002902:	d009      	beq.n	8002918 <HAL_TIM_PWM_Start+0xd0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a13      	ldr	r2, [pc, #76]	; (8002958 <HAL_TIM_PWM_Start+0x110>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d004      	beq.n	8002918 <HAL_TIM_PWM_Start+0xd0>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <HAL_TIM_PWM_Start+0x114>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d111      	bne.n	800293c <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2207      	movs	r2, #7
 8002920:	4013      	ands	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b06      	cmp	r3, #6
 8002928:	d010      	beq.n	800294c <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	430a      	orrs	r2, r1
 8002938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293a:	e007      	b.n	800294c <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2101      	movs	r1, #1
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b004      	add	sp, #16
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	40010800 	.word	0x40010800
 800295c:	40011400 	.word	0x40011400

08002960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296c:	2317      	movs	r3, #23
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2238      	movs	r2, #56	; 0x38
 8002978:	5c9b      	ldrb	r3, [r3, r2]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_TIM_PWM_ConfigChannel+0x22>
 800297e:	2302      	movs	r3, #2
 8002980:	e0ad      	b.n	8002ade <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2238      	movs	r2, #56	; 0x38
 8002986:	2101      	movs	r1, #1
 8002988:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d100      	bne.n	8002992 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002990:	e076      	b.n	8002a80 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b0c      	cmp	r3, #12
 8002996:	d900      	bls.n	800299a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002998:	e095      	b.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b08      	cmp	r3, #8
 800299e:	d04e      	beq.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0xde>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d900      	bls.n	80029a8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80029a6:	e08e      	b.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d021      	beq.n	80029f8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80029b4:	e087      	b.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	0011      	movs	r1, r2
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 f8e8 	bl	8002b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2108      	movs	r1, #8
 80029d0:	430a      	orrs	r2, r1
 80029d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2104      	movs	r1, #4
 80029e0:	438a      	bics	r2, r1
 80029e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6999      	ldr	r1, [r3, #24]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	619a      	str	r2, [r3, #24]
      break;
 80029f6:	e06b      	b.n	8002ad0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	0011      	movs	r1, r2
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 f903 	bl	8002c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2180      	movs	r1, #128	; 0x80
 8002a12:	0109      	lsls	r1, r1, #4
 8002a14:	430a      	orrs	r2, r1
 8002a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4931      	ldr	r1, [pc, #196]	; (8002ae8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002a24:	400a      	ands	r2, r1
 8002a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6999      	ldr	r1, [r3, #24]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	021a      	lsls	r2, r3, #8
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	619a      	str	r2, [r3, #24]
      break;
 8002a3c:	e048      	b.n	8002ad0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	0011      	movs	r1, r2
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 f922 	bl	8002c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2108      	movs	r1, #8
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2104      	movs	r1, #4
 8002a68:	438a      	bics	r2, r1
 8002a6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69d9      	ldr	r1, [r3, #28]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	61da      	str	r2, [r3, #28]
      break;
 8002a7e:	e027      	b.n	8002ad0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	0011      	movs	r1, r2
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 f941 	bl	8002d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0109      	lsls	r1, r1, #4
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	490f      	ldr	r1, [pc, #60]	; (8002ae8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002aac:	400a      	ands	r2, r1
 8002aae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69d9      	ldr	r1, [r3, #28]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	021a      	lsls	r2, r3, #8
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	61da      	str	r2, [r3, #28]
      break;
 8002ac4:	e004      	b.n	8002ad0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002ac6:	2317      	movs	r3, #23
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
      break;
 8002ace:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2238      	movs	r2, #56	; 0x38
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	5499      	strb	r1, [r3, r2]

  return status;
 8002ad8:	2317      	movs	r3, #23
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	781b      	ldrb	r3, [r3, #0]
}
 8002ade:	0018      	movs	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b006      	add	sp, #24
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	fffffbff 	.word	0xfffffbff

08002aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	05db      	lsls	r3, r3, #23
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d007      	beq.n	8002b16 <TIM_Base_SetConfig+0x2a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <TIM_Base_SetConfig+0x9c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d003      	beq.n	8002b16 <TIM_Base_SetConfig+0x2a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <TIM_Base_SetConfig+0xa0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d108      	bne.n	8002b28 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2270      	movs	r2, #112	; 0x70
 8002b1a:	4393      	bics	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	05db      	lsls	r3, r3, #23
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d007      	beq.n	8002b42 <TIM_Base_SetConfig+0x56>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <TIM_Base_SetConfig+0x9c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d003      	beq.n	8002b42 <TIM_Base_SetConfig+0x56>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <TIM_Base_SetConfig+0xa0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d108      	bne.n	8002b54 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <TIM_Base_SetConfig+0xa4>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	4393      	bics	r3, r2
 8002b5a:	001a      	movs	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	615a      	str	r2, [r3, #20]
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b004      	add	sp, #16
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40010800 	.word	0x40010800
 8002b8c:	40011400 	.word	0x40011400
 8002b90:	fffffcff 	.word	0xfffffcff

08002b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4393      	bics	r3, r2
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2270      	movs	r2, #112	; 0x70
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	4393      	bics	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	4393      	bics	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	621a      	str	r2, [r3, #32]
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b006      	add	sp, #24
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	001a      	movs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <TIM_OC2_SetConfig+0x7c>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <TIM_OC2_SetConfig+0x80>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2220      	movs	r2, #32
 8002c56:	4393      	bics	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	621a      	str	r2, [r3, #32]
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b006      	add	sp, #24
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	ffff8fff 	.word	0xffff8fff
 8002c8c:	fffffcff 	.word	0xfffffcff

08002c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <TIM_OC3_SetConfig+0x78>)
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2270      	movs	r2, #112	; 0x70
 8002cbc:	4393      	bics	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	4393      	bics	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <TIM_OC3_SetConfig+0x7c>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	621a      	str	r2, [r3, #32]
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b006      	add	sp, #24
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	fffffeff 	.word	0xfffffeff
 8002d0c:	fffffdff 	.word	0xfffffdff

08002d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <TIM_OC4_SetConfig+0x7c>)
 8002d20:	401a      	ands	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <TIM_OC4_SetConfig+0x80>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <TIM_OC4_SetConfig+0x84>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <TIM_OC4_SetConfig+0x88>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	031b      	lsls	r3, r3, #12
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b006      	add	sp, #24
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	ffffefff 	.word	0xffffefff
 8002d90:	ffff8fff 	.word	0xffff8fff
 8002d94:	fffffcff 	.word	0xfffffcff
 8002d98:	ffffdfff 	.word	0xffffdfff

08002d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	221f      	movs	r2, #31
 8002dac:	4013      	ands	r3, r2
 8002dae:	2201      	movs	r2, #1
 8002db0:	409a      	lsls	r2, r3
 8002db2:	0013      	movs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	43d2      	mvns	r2, r2
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1a      	ldr	r2, [r3, #32]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	211f      	movs	r1, #31
 8002dcc:	400b      	ands	r3, r1
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4099      	lsls	r1, r3
 8002dd2:	000b      	movs	r3, r1
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	621a      	str	r2, [r3, #32]
}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b006      	add	sp, #24
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2238      	movs	r2, #56	; 0x38
 8002df2:	5c9b      	ldrb	r3, [r3, r2]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e042      	b.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2238      	movs	r2, #56	; 0x38
 8002e00:	2101      	movs	r1, #1
 8002e02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2239      	movs	r2, #57	; 0x39
 8002e08:	2102      	movs	r1, #2
 8002e0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2270      	movs	r2, #112	; 0x70
 8002e20:	4393      	bics	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	05db      	lsls	r3, r3, #23
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d009      	beq.n	8002e56 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a11      	ldr	r2, [pc, #68]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d004      	beq.n	8002e56 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0f      	ldr	r2, [pc, #60]	; (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10c      	bne.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2280      	movs	r2, #128	; 0x80
 8002e5a:	4393      	bics	r3, r2
 8002e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2239      	movs	r2, #57	; 0x39
 8002e74:	2101      	movs	r1, #1
 8002e76:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2238      	movs	r2, #56	; 0x38
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	0018      	movs	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b004      	add	sp, #16
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	40010800 	.word	0x40010800
 8002e90:	40011400 	.word	0x40011400

08002e94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e044      	b.n	8002f30 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d107      	bne.n	8002ebe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2278      	movs	r2, #120	; 0x78
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7fe f889 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2224      	movs	r2, #36	; 0x24
 8002ec2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2101      	movs	r1, #1
 8002ed0:	438a      	bics	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 fc14 	bl	8003704 <UART_SetConfig>
 8002edc:	0003      	movs	r3, r0
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e024      	b.n	8002f30 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f000 fe8b 	bl	8003c0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	490d      	ldr	r1, [pc, #52]	; (8002f38 <HAL_UART_Init+0xa4>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	212a      	movs	r1, #42	; 0x2a
 8002f12:	438a      	bics	r2, r1
 8002f14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 ff23 	bl	8003d74 <UART_CheckIdleState>
 8002f2e:	0003      	movs	r3, r0
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	ffffb7ff 	.word	0xffffb7ff

08002f3c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	1dbb      	adds	r3, r7, #6
 8002f4a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	589b      	ldr	r3, [r3, r2]
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d000      	beq.n	8002f58 <HAL_UART_Receive+0x1c>
 8002f56:	e0d0      	b.n	80030fa <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_UART_Receive+0x2a>
 8002f5e:	1dbb      	adds	r3, r7, #6
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0c8      	b.n	80030fc <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	015b      	lsls	r3, r3, #5
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d109      	bne.n	8002f8a <HAL_UART_Receive+0x4e>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2201      	movs	r2, #1
 8002f82:	4013      	ands	r3, r2
 8002f84:	d001      	beq.n	8002f8a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0b8      	b.n	80030fc <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2284      	movs	r2, #132	; 0x84
 8002f8e:	2100      	movs	r1, #0
 8002f90:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	2122      	movs	r1, #34	; 0x22
 8002f98:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fa0:	f7fe f8f2 	bl	8001188 <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1dba      	adds	r2, r7, #6
 8002fac:	2158      	movs	r1, #88	; 0x58
 8002fae:	8812      	ldrh	r2, [r2, #0]
 8002fb0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1dba      	adds	r2, r7, #6
 8002fb6:	215a      	movs	r1, #90	; 0x5a
 8002fb8:	8812      	ldrh	r2, [r2, #0]
 8002fba:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	015b      	lsls	r3, r3, #5
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_UART_Receive+0xa8>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d104      	bne.n	8002fda <HAL_UART_Receive+0x9e>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	225c      	movs	r2, #92	; 0x5c
 8002fd4:	494b      	ldr	r1, [pc, #300]	; (8003104 <HAL_UART_Receive+0x1c8>)
 8002fd6:	5299      	strh	r1, [r3, r2]
 8002fd8:	e02e      	b.n	8003038 <HAL_UART_Receive+0xfc>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	225c      	movs	r2, #92	; 0x5c
 8002fde:	21ff      	movs	r1, #255	; 0xff
 8002fe0:	5299      	strh	r1, [r3, r2]
 8002fe2:	e029      	b.n	8003038 <HAL_UART_Receive+0xfc>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10d      	bne.n	8003008 <HAL_UART_Receive+0xcc>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_UART_Receive+0xc2>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	225c      	movs	r2, #92	; 0x5c
 8002ff8:	21ff      	movs	r1, #255	; 0xff
 8002ffa:	5299      	strh	r1, [r3, r2]
 8002ffc:	e01c      	b.n	8003038 <HAL_UART_Receive+0xfc>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	225c      	movs	r2, #92	; 0x5c
 8003002:	217f      	movs	r1, #127	; 0x7f
 8003004:	5299      	strh	r1, [r3, r2]
 8003006:	e017      	b.n	8003038 <HAL_UART_Receive+0xfc>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	055b      	lsls	r3, r3, #21
 8003010:	429a      	cmp	r2, r3
 8003012:	d10d      	bne.n	8003030 <HAL_UART_Receive+0xf4>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d104      	bne.n	8003026 <HAL_UART_Receive+0xea>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	225c      	movs	r2, #92	; 0x5c
 8003020:	217f      	movs	r1, #127	; 0x7f
 8003022:	5299      	strh	r1, [r3, r2]
 8003024:	e008      	b.n	8003038 <HAL_UART_Receive+0xfc>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	225c      	movs	r2, #92	; 0x5c
 800302a:	213f      	movs	r1, #63	; 0x3f
 800302c:	5299      	strh	r1, [r3, r2]
 800302e:	e003      	b.n	8003038 <HAL_UART_Receive+0xfc>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	225c      	movs	r2, #92	; 0x5c
 8003034:	2100      	movs	r1, #0
 8003036:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003038:	2312      	movs	r3, #18
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	215c      	movs	r1, #92	; 0x5c
 8003040:	5a52      	ldrh	r2, [r2, r1]
 8003042:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	015b      	lsls	r3, r3, #5
 800304c:	429a      	cmp	r2, r3
 800304e:	d108      	bne.n	8003062 <HAL_UART_Receive+0x126>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d104      	bne.n	8003062 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	e003      	b.n	800306a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800306a:	e03a      	b.n	80030e2 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	0013      	movs	r3, r2
 8003076:	2200      	movs	r2, #0
 8003078:	2120      	movs	r1, #32
 800307a:	f000 ff23 	bl	8003ec4 <UART_WaitOnFlagUntilTimeout>
 800307e:	1e03      	subs	r3, r0, #0
 8003080:	d005      	beq.n	800308e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	2120      	movs	r1, #32
 8003088:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e036      	b.n	80030fc <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10e      	bne.n	80030b2 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	b29b      	uxth	r3, r3
 800309c:	2212      	movs	r2, #18
 800309e:	18ba      	adds	r2, r7, r2
 80030a0:	8812      	ldrh	r2, [r2, #0]
 80030a2:	4013      	ands	r3, r2
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	3302      	adds	r3, #2
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	e00e      	b.n	80030d0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2212      	movs	r2, #18
 80030bc:	18ba      	adds	r2, r7, r2
 80030be:	8812      	ldrh	r2, [r2, #0]
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	4013      	ands	r3, r2
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3301      	adds	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	225a      	movs	r2, #90	; 0x5a
 80030d4:	5a9b      	ldrh	r3, [r3, r2]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b299      	uxth	r1, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	225a      	movs	r2, #90	; 0x5a
 80030e0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	225a      	movs	r2, #90	; 0x5a
 80030e6:	5a9b      	ldrh	r3, [r3, r2]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1be      	bne.n	800306c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2280      	movs	r2, #128	; 0x80
 80030f2:	2120      	movs	r1, #32
 80030f4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b008      	add	sp, #32
 8003102:	bd80      	pop	{r7, pc}
 8003104:	000001ff 	.word	0x000001ff

08003108 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b0ab      	sub	sp, #172	; 0xac
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	22a4      	movs	r2, #164	; 0xa4
 8003118:	18b9      	adds	r1, r7, r2
 800311a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	20a0      	movs	r0, #160	; 0xa0
 8003124:	1839      	adds	r1, r7, r0
 8003126:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	219c      	movs	r1, #156	; 0x9c
 8003130:	1879      	adds	r1, r7, r1
 8003132:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003134:	0011      	movs	r1, r2
 8003136:	18bb      	adds	r3, r7, r2
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a99      	ldr	r2, [pc, #612]	; (80033a0 <HAL_UART_IRQHandler+0x298>)
 800313c:	4013      	ands	r3, r2
 800313e:	2298      	movs	r2, #152	; 0x98
 8003140:	18bc      	adds	r4, r7, r2
 8003142:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003144:	18bb      	adds	r3, r7, r2
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d114      	bne.n	8003176 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800314c:	187b      	adds	r3, r7, r1
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2220      	movs	r2, #32
 8003152:	4013      	ands	r3, r2
 8003154:	d00f      	beq.n	8003176 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003156:	183b      	adds	r3, r7, r0
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2220      	movs	r2, #32
 800315c:	4013      	ands	r3, r2
 800315e:	d00a      	beq.n	8003176 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003164:	2b00      	cmp	r3, #0
 8003166:	d100      	bne.n	800316a <HAL_UART_IRQHandler+0x62>
 8003168:	e2a0      	b.n	80036ac <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	0010      	movs	r0, r2
 8003172:	4798      	blx	r3
      }
      return;
 8003174:	e29a      	b.n	80036ac <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003176:	2398      	movs	r3, #152	; 0x98
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d100      	bne.n	8003182 <HAL_UART_IRQHandler+0x7a>
 8003180:	e114      	b.n	80033ac <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003182:	239c      	movs	r3, #156	; 0x9c
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2201      	movs	r2, #1
 800318a:	4013      	ands	r3, r2
 800318c:	d106      	bne.n	800319c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800318e:	23a0      	movs	r3, #160	; 0xa0
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a83      	ldr	r2, [pc, #524]	; (80033a4 <HAL_UART_IRQHandler+0x29c>)
 8003196:	4013      	ands	r3, r2
 8003198:	d100      	bne.n	800319c <HAL_UART_IRQHandler+0x94>
 800319a:	e107      	b.n	80033ac <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800319c:	23a4      	movs	r3, #164	; 0xa4
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	4013      	ands	r3, r2
 80031a6:	d012      	beq.n	80031ce <HAL_UART_IRQHandler+0xc6>
 80031a8:	23a0      	movs	r3, #160	; 0xa0
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	d00b      	beq.n	80031ce <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2201      	movs	r2, #1
 80031bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2284      	movs	r2, #132	; 0x84
 80031c2:	589b      	ldr	r3, [r3, r2]
 80031c4:	2201      	movs	r2, #1
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2184      	movs	r1, #132	; 0x84
 80031cc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031ce:	23a4      	movs	r3, #164	; 0xa4
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2202      	movs	r2, #2
 80031d6:	4013      	ands	r3, r2
 80031d8:	d011      	beq.n	80031fe <HAL_UART_IRQHandler+0xf6>
 80031da:	239c      	movs	r3, #156	; 0x9c
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2201      	movs	r2, #1
 80031e2:	4013      	ands	r3, r2
 80031e4:	d00b      	beq.n	80031fe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2202      	movs	r2, #2
 80031ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2284      	movs	r2, #132	; 0x84
 80031f2:	589b      	ldr	r3, [r3, r2]
 80031f4:	2204      	movs	r2, #4
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2184      	movs	r1, #132	; 0x84
 80031fc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031fe:	23a4      	movs	r3, #164	; 0xa4
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2204      	movs	r2, #4
 8003206:	4013      	ands	r3, r2
 8003208:	d011      	beq.n	800322e <HAL_UART_IRQHandler+0x126>
 800320a:	239c      	movs	r3, #156	; 0x9c
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2201      	movs	r2, #1
 8003212:	4013      	ands	r3, r2
 8003214:	d00b      	beq.n	800322e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2204      	movs	r2, #4
 800321c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2284      	movs	r2, #132	; 0x84
 8003222:	589b      	ldr	r3, [r3, r2]
 8003224:	2202      	movs	r2, #2
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2184      	movs	r1, #132	; 0x84
 800322c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800322e:	23a4      	movs	r3, #164	; 0xa4
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2208      	movs	r2, #8
 8003236:	4013      	ands	r3, r2
 8003238:	d017      	beq.n	800326a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800323a:	23a0      	movs	r3, #160	; 0xa0
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2220      	movs	r2, #32
 8003242:	4013      	ands	r3, r2
 8003244:	d105      	bne.n	8003252 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003246:	239c      	movs	r3, #156	; 0x9c
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2201      	movs	r2, #1
 800324e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2208      	movs	r2, #8
 8003258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2284      	movs	r2, #132	; 0x84
 800325e:	589b      	ldr	r3, [r3, r2]
 8003260:	2208      	movs	r2, #8
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2184      	movs	r1, #132	; 0x84
 8003268:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800326a:	23a4      	movs	r3, #164	; 0xa4
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	4013      	ands	r3, r2
 8003276:	d013      	beq.n	80032a0 <HAL_UART_IRQHandler+0x198>
 8003278:	23a0      	movs	r3, #160	; 0xa0
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	04db      	lsls	r3, r3, #19
 8003282:	4013      	ands	r3, r2
 8003284:	d00c      	beq.n	80032a0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	0112      	lsls	r2, r2, #4
 800328e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2284      	movs	r2, #132	; 0x84
 8003294:	589b      	ldr	r3, [r3, r2]
 8003296:	2220      	movs	r2, #32
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2184      	movs	r1, #132	; 0x84
 800329e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2284      	movs	r2, #132	; 0x84
 80032a4:	589b      	ldr	r3, [r3, r2]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d100      	bne.n	80032ac <HAL_UART_IRQHandler+0x1a4>
 80032aa:	e201      	b.n	80036b0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ac:	23a4      	movs	r3, #164	; 0xa4
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2220      	movs	r2, #32
 80032b4:	4013      	ands	r3, r2
 80032b6:	d00e      	beq.n	80032d6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032b8:	23a0      	movs	r3, #160	; 0xa0
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2220      	movs	r2, #32
 80032c0:	4013      	ands	r3, r2
 80032c2:	d008      	beq.n	80032d6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	0010      	movs	r0, r2
 80032d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2284      	movs	r2, #132	; 0x84
 80032da:	589b      	ldr	r3, [r3, r2]
 80032dc:	2194      	movs	r1, #148	; 0x94
 80032de:	187a      	adds	r2, r7, r1
 80032e0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2240      	movs	r2, #64	; 0x40
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d004      	beq.n	80032fa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2228      	movs	r2, #40	; 0x28
 80032f6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032f8:	d047      	beq.n	800338a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 fe4b 	bl	8003f98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2240      	movs	r2, #64	; 0x40
 800330a:	4013      	ands	r3, r2
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d137      	bne.n	8003380 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003310:	f3ef 8310 	mrs	r3, PRIMASK
 8003314:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003318:	2090      	movs	r0, #144	; 0x90
 800331a:	183a      	adds	r2, r7, r0
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	2301      	movs	r3, #1
 8003320:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003324:	f383 8810 	msr	PRIMASK, r3
}
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2140      	movs	r1, #64	; 0x40
 8003336:	438a      	bics	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	183b      	adds	r3, r7, r0
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003342:	f383 8810 	msr	PRIMASK, r3
}
 8003346:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334c:	2b00      	cmp	r3, #0
 800334e:	d012      	beq.n	8003376 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <HAL_UART_IRQHandler+0x2a0>)
 8003356:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335c:	0018      	movs	r0, r3
 800335e:	f7fe f85f 	bl	8001420 <HAL_DMA_Abort_IT>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d01a      	beq.n	800339c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003370:	0018      	movs	r0, r3
 8003372:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003374:	e012      	b.n	800339c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f9af 	bl	80036dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337e:	e00d      	b.n	800339c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	0018      	movs	r0, r3
 8003384:	f000 f9aa 	bl	80036dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	e008      	b.n	800339c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0018      	movs	r0, r3
 800338e:	f000 f9a5 	bl	80036dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2284      	movs	r2, #132	; 0x84
 8003396:	2100      	movs	r1, #0
 8003398:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800339a:	e189      	b.n	80036b0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339c:	46c0      	nop			; (mov r8, r8)
    return;
 800339e:	e187      	b.n	80036b0 <HAL_UART_IRQHandler+0x5a8>
 80033a0:	0000080f 	.word	0x0000080f
 80033a4:	04000120 	.word	0x04000120
 80033a8:	08004061 	.word	0x08004061

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d000      	beq.n	80033b6 <HAL_UART_IRQHandler+0x2ae>
 80033b4:	e13b      	b.n	800362e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033b6:	23a4      	movs	r3, #164	; 0xa4
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2210      	movs	r2, #16
 80033be:	4013      	ands	r3, r2
 80033c0:	d100      	bne.n	80033c4 <HAL_UART_IRQHandler+0x2bc>
 80033c2:	e134      	b.n	800362e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033c4:	23a0      	movs	r3, #160	; 0xa0
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2210      	movs	r2, #16
 80033cc:	4013      	ands	r3, r2
 80033ce:	d100      	bne.n	80033d2 <HAL_UART_IRQHandler+0x2ca>
 80033d0:	e12d      	b.n	800362e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2210      	movs	r2, #16
 80033d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b40      	cmp	r3, #64	; 0x40
 80033e6:	d000      	beq.n	80033ea <HAL_UART_IRQHandler+0x2e2>
 80033e8:	e0a1      	b.n	800352e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	217e      	movs	r1, #126	; 0x7e
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d100      	bne.n	8003402 <HAL_UART_IRQHandler+0x2fa>
 8003400:	e158      	b.n	80036b4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2258      	movs	r2, #88	; 0x58
 8003406:	5a9b      	ldrh	r3, [r3, r2]
 8003408:	187a      	adds	r2, r7, r1
 800340a:	8812      	ldrh	r2, [r2, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d300      	bcc.n	8003412 <HAL_UART_IRQHandler+0x30a>
 8003410:	e150      	b.n	80036b4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	187a      	adds	r2, r7, r1
 8003416:	215a      	movs	r1, #90	; 0x5a
 8003418:	8812      	ldrh	r2, [r2, #0]
 800341a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2220      	movs	r2, #32
 8003426:	4013      	ands	r3, r2
 8003428:	d16f      	bne.n	800350a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342a:	f3ef 8310 	mrs	r3, PRIMASK
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003432:	67bb      	str	r3, [r7, #120]	; 0x78
 8003434:	2301      	movs	r3, #1
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343a:	f383 8810 	msr	PRIMASK, r3
}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	499e      	ldr	r1, [pc, #632]	; (80036c4 <HAL_UART_IRQHandler+0x5bc>)
 800344c:	400a      	ands	r2, r1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003452:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	f383 8810 	msr	PRIMASK, r3
}
 800345a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345c:	f3ef 8310 	mrs	r3, PRIMASK
 8003460:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003464:	677b      	str	r3, [r7, #116]	; 0x74
 8003466:	2301      	movs	r3, #1
 8003468:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2101      	movs	r1, #1
 800347e:	438a      	bics	r2, r1
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003484:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348e:	f3ef 8310 	mrs	r3, PRIMASK
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003494:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003496:	673b      	str	r3, [r7, #112]	; 0x70
 8003498:	2301      	movs	r3, #1
 800349a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800349e:	f383 8810 	msr	PRIMASK, r3
}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2140      	movs	r1, #64	; 0x40
 80034b0:	438a      	bics	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ba:	f383 8810 	msr	PRIMASK, r3
}
 80034be:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	2120      	movs	r1, #32
 80034c6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ce:	f3ef 8310 	mrs	r3, PRIMASK
 80034d2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80034d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034d8:	2301      	movs	r3, #1
 80034da:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034de:	f383 8810 	msr	PRIMASK, r3
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2110      	movs	r1, #16
 80034f0:	438a      	bics	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fa:	f383 8810 	msr	PRIMASK, r3
}
 80034fe:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003504:	0018      	movs	r0, r3
 8003506:	f7fd ff4b 	bl	80013a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2258      	movs	r2, #88	; 0x58
 8003514:	5a9a      	ldrh	r2, [r3, r2]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	215a      	movs	r1, #90	; 0x5a
 800351a:	5a5b      	ldrh	r3, [r3, r1]
 800351c:	b29b      	uxth	r3, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	b29a      	uxth	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	0011      	movs	r1, r2
 8003526:	0018      	movs	r0, r3
 8003528:	f000 f8e0 	bl	80036ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800352c:	e0c2      	b.n	80036b4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2258      	movs	r2, #88	; 0x58
 8003532:	5a99      	ldrh	r1, [r3, r2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	225a      	movs	r2, #90	; 0x5a
 8003538:	5a9b      	ldrh	r3, [r3, r2]
 800353a:	b29a      	uxth	r2, r3
 800353c:	208e      	movs	r0, #142	; 0x8e
 800353e:	183b      	adds	r3, r7, r0
 8003540:	1a8a      	subs	r2, r1, r2
 8003542:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	225a      	movs	r2, #90	; 0x5a
 8003548:	5a9b      	ldrh	r3, [r3, r2]
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d100      	bne.n	8003552 <HAL_UART_IRQHandler+0x44a>
 8003550:	e0b2      	b.n	80036b8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003552:	183b      	adds	r3, r7, r0
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d100      	bne.n	800355c <HAL_UART_IRQHandler+0x454>
 800355a:	e0ad      	b.n	80036b8 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355c:	f3ef 8310 	mrs	r3, PRIMASK
 8003560:	60fb      	str	r3, [r7, #12]
  return(result);
 8003562:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003564:	2488      	movs	r4, #136	; 0x88
 8003566:	193a      	adds	r2, r7, r4
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	2301      	movs	r3, #1
 800356c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f383 8810 	msr	PRIMASK, r3
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4951      	ldr	r1, [pc, #324]	; (80036c8 <HAL_UART_IRQHandler+0x5c0>)
 8003582:	400a      	ands	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	193b      	adds	r3, r7, r4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003594:	f3ef 8310 	mrs	r3, PRIMASK
 8003598:	61bb      	str	r3, [r7, #24]
  return(result);
 800359a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359c:	2484      	movs	r4, #132	; 0x84
 800359e:	193a      	adds	r2, r7, r4
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	2301      	movs	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2101      	movs	r1, #1
 80035ba:	438a      	bics	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	193b      	adds	r3, r7, r4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f383 8810 	msr	PRIMASK, r3
}
 80035ca:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	2120      	movs	r1, #32
 80035d2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e0:	f3ef 8310 	mrs	r3, PRIMASK
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e8:	2480      	movs	r4, #128	; 0x80
 80035ea:	193a      	adds	r2, r7, r4
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	2301      	movs	r3, #1
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	f383 8810 	msr	PRIMASK, r3
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2110      	movs	r1, #16
 8003606:	438a      	bics	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	193b      	adds	r3, r7, r4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800361e:	183b      	adds	r3, r7, r0
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0011      	movs	r1, r2
 8003626:	0018      	movs	r0, r3
 8003628:	f000 f860 	bl	80036ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800362c:	e044      	b.n	80036b8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800362e:	23a4      	movs	r3, #164	; 0xa4
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	035b      	lsls	r3, r3, #13
 8003638:	4013      	ands	r3, r2
 800363a:	d010      	beq.n	800365e <HAL_UART_IRQHandler+0x556>
 800363c:	239c      	movs	r3, #156	; 0x9c
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	03db      	lsls	r3, r3, #15
 8003646:	4013      	ands	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2280      	movs	r2, #128	; 0x80
 8003650:	0352      	lsls	r2, r2, #13
 8003652:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	0018      	movs	r0, r3
 8003658:	f000 fd44 	bl	80040e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800365c:	e02f      	b.n	80036be <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800365e:	23a4      	movs	r3, #164	; 0xa4
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	4013      	ands	r3, r2
 8003668:	d00f      	beq.n	800368a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800366a:	23a0      	movs	r3, #160	; 0xa0
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2280      	movs	r2, #128	; 0x80
 8003672:	4013      	ands	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01e      	beq.n	80036bc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	0010      	movs	r0, r2
 8003686:	4798      	blx	r3
    }
    return;
 8003688:	e018      	b.n	80036bc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800368a:	23a4      	movs	r3, #164	; 0xa4
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2240      	movs	r2, #64	; 0x40
 8003692:	4013      	ands	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_UART_IRQHandler+0x5b6>
 8003696:	23a0      	movs	r3, #160	; 0xa0
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2240      	movs	r2, #64	; 0x40
 800369e:	4013      	ands	r3, r2
 80036a0:	d00d      	beq.n	80036be <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 fcf2 	bl	800408e <UART_EndTransmit_IT>
    return;
 80036aa:	e008      	b.n	80036be <HAL_UART_IRQHandler+0x5b6>
      return;
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	e006      	b.n	80036be <HAL_UART_IRQHandler+0x5b6>
    return;
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	e004      	b.n	80036be <HAL_UART_IRQHandler+0x5b6>
      return;
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	e002      	b.n	80036be <HAL_UART_IRQHandler+0x5b6>
      return;
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	e000      	b.n	80036be <HAL_UART_IRQHandler+0x5b6>
    return;
 80036bc:	46c0      	nop			; (mov r8, r8)
  }

}
 80036be:	46bd      	mov	sp, r7
 80036c0:	b02b      	add	sp, #172	; 0xac
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	fffffeff 	.word	0xfffffeff
 80036c8:	fffffedf 	.word	0xfffffedf

080036cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b002      	add	sp, #8
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	000a      	movs	r2, r1
 80036f6:	1cbb      	adds	r3, r7, #2
 80036f8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b002      	add	sp, #8
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003704:	b5b0      	push	{r4, r5, r7, lr}
 8003706:	b08e      	sub	sp, #56	; 0x38
 8003708:	af00      	add	r7, sp, #0
 800370a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800370c:	231a      	movs	r3, #26
 800370e:	2218      	movs	r2, #24
 8003710:	189b      	adds	r3, r3, r2
 8003712:	19db      	adds	r3, r3, r7
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	431a      	orrs	r2, r3
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	431a      	orrs	r2, r3
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4313      	orrs	r3, r2
 800372e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4ac6      	ldr	r2, [pc, #792]	; (8003a50 <UART_SetConfig+0x34c>)
 8003738:	4013      	ands	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003742:	430a      	orrs	r2, r1
 8003744:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4ac1      	ldr	r2, [pc, #772]	; (8003a54 <UART_SetConfig+0x350>)
 800374e:	4013      	ands	r3, r2
 8003750:	0019      	movs	r1, r3
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4abb      	ldr	r2, [pc, #748]	; (8003a58 <UART_SetConfig+0x354>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003774:	4313      	orrs	r3, r2
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4ab7      	ldr	r2, [pc, #732]	; (8003a5c <UART_SetConfig+0x358>)
 8003780:	4013      	ands	r3, r2
 8003782:	0019      	movs	r1, r3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4ab3      	ldr	r2, [pc, #716]	; (8003a60 <UART_SetConfig+0x35c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d131      	bne.n	80037fc <UART_SetConfig+0xf8>
 8003798:	4bb2      	ldr	r3, [pc, #712]	; (8003a64 <UART_SetConfig+0x360>)
 800379a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379c:	2203      	movs	r2, #3
 800379e:	4013      	ands	r3, r2
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d01d      	beq.n	80037e0 <UART_SetConfig+0xdc>
 80037a4:	d823      	bhi.n	80037ee <UART_SetConfig+0xea>
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d00c      	beq.n	80037c4 <UART_SetConfig+0xc0>
 80037aa:	d820      	bhi.n	80037ee <UART_SetConfig+0xea>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <UART_SetConfig+0xb2>
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d00e      	beq.n	80037d2 <UART_SetConfig+0xce>
 80037b4:	e01b      	b.n	80037ee <UART_SetConfig+0xea>
 80037b6:	231b      	movs	r3, #27
 80037b8:	2218      	movs	r2, #24
 80037ba:	189b      	adds	r3, r3, r2
 80037bc:	19db      	adds	r3, r3, r7
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e09c      	b.n	80038fe <UART_SetConfig+0x1fa>
 80037c4:	231b      	movs	r3, #27
 80037c6:	2218      	movs	r2, #24
 80037c8:	189b      	adds	r3, r3, r2
 80037ca:	19db      	adds	r3, r3, r7
 80037cc:	2202      	movs	r2, #2
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e095      	b.n	80038fe <UART_SetConfig+0x1fa>
 80037d2:	231b      	movs	r3, #27
 80037d4:	2218      	movs	r2, #24
 80037d6:	189b      	adds	r3, r3, r2
 80037d8:	19db      	adds	r3, r3, r7
 80037da:	2204      	movs	r2, #4
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e08e      	b.n	80038fe <UART_SetConfig+0x1fa>
 80037e0:	231b      	movs	r3, #27
 80037e2:	2218      	movs	r2, #24
 80037e4:	189b      	adds	r3, r3, r2
 80037e6:	19db      	adds	r3, r3, r7
 80037e8:	2208      	movs	r2, #8
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e087      	b.n	80038fe <UART_SetConfig+0x1fa>
 80037ee:	231b      	movs	r3, #27
 80037f0:	2218      	movs	r2, #24
 80037f2:	189b      	adds	r3, r3, r2
 80037f4:	19db      	adds	r3, r3, r7
 80037f6:	2210      	movs	r2, #16
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e080      	b.n	80038fe <UART_SetConfig+0x1fa>
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a99      	ldr	r2, [pc, #612]	; (8003a68 <UART_SetConfig+0x364>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d131      	bne.n	800386a <UART_SetConfig+0x166>
 8003806:	4b97      	ldr	r3, [pc, #604]	; (8003a64 <UART_SetConfig+0x360>)
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	220c      	movs	r2, #12
 800380c:	4013      	ands	r3, r2
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d01d      	beq.n	800384e <UART_SetConfig+0x14a>
 8003812:	d823      	bhi.n	800385c <UART_SetConfig+0x158>
 8003814:	2b08      	cmp	r3, #8
 8003816:	d00c      	beq.n	8003832 <UART_SetConfig+0x12e>
 8003818:	d820      	bhi.n	800385c <UART_SetConfig+0x158>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <UART_SetConfig+0x120>
 800381e:	2b04      	cmp	r3, #4
 8003820:	d00e      	beq.n	8003840 <UART_SetConfig+0x13c>
 8003822:	e01b      	b.n	800385c <UART_SetConfig+0x158>
 8003824:	231b      	movs	r3, #27
 8003826:	2218      	movs	r2, #24
 8003828:	189b      	adds	r3, r3, r2
 800382a:	19db      	adds	r3, r3, r7
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e065      	b.n	80038fe <UART_SetConfig+0x1fa>
 8003832:	231b      	movs	r3, #27
 8003834:	2218      	movs	r2, #24
 8003836:	189b      	adds	r3, r3, r2
 8003838:	19db      	adds	r3, r3, r7
 800383a:	2202      	movs	r2, #2
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e05e      	b.n	80038fe <UART_SetConfig+0x1fa>
 8003840:	231b      	movs	r3, #27
 8003842:	2218      	movs	r2, #24
 8003844:	189b      	adds	r3, r3, r2
 8003846:	19db      	adds	r3, r3, r7
 8003848:	2204      	movs	r2, #4
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	e057      	b.n	80038fe <UART_SetConfig+0x1fa>
 800384e:	231b      	movs	r3, #27
 8003850:	2218      	movs	r2, #24
 8003852:	189b      	adds	r3, r3, r2
 8003854:	19db      	adds	r3, r3, r7
 8003856:	2208      	movs	r2, #8
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e050      	b.n	80038fe <UART_SetConfig+0x1fa>
 800385c:	231b      	movs	r3, #27
 800385e:	2218      	movs	r2, #24
 8003860:	189b      	adds	r3, r3, r2
 8003862:	19db      	adds	r3, r3, r7
 8003864:	2210      	movs	r2, #16
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e049      	b.n	80038fe <UART_SetConfig+0x1fa>
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a7a      	ldr	r2, [pc, #488]	; (8003a58 <UART_SetConfig+0x354>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d13e      	bne.n	80038f2 <UART_SetConfig+0x1ee>
 8003874:	4b7b      	ldr	r3, [pc, #492]	; (8003a64 <UART_SetConfig+0x360>)
 8003876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003878:	23c0      	movs	r3, #192	; 0xc0
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	4013      	ands	r3, r2
 800387e:	22c0      	movs	r2, #192	; 0xc0
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	4293      	cmp	r3, r2
 8003884:	d027      	beq.n	80038d6 <UART_SetConfig+0x1d2>
 8003886:	22c0      	movs	r2, #192	; 0xc0
 8003888:	0112      	lsls	r2, r2, #4
 800388a:	4293      	cmp	r3, r2
 800388c:	d82a      	bhi.n	80038e4 <UART_SetConfig+0x1e0>
 800388e:	2280      	movs	r2, #128	; 0x80
 8003890:	0112      	lsls	r2, r2, #4
 8003892:	4293      	cmp	r3, r2
 8003894:	d011      	beq.n	80038ba <UART_SetConfig+0x1b6>
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	0112      	lsls	r2, r2, #4
 800389a:	4293      	cmp	r3, r2
 800389c:	d822      	bhi.n	80038e4 <UART_SetConfig+0x1e0>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <UART_SetConfig+0x1a8>
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	00d2      	lsls	r2, r2, #3
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00e      	beq.n	80038c8 <UART_SetConfig+0x1c4>
 80038aa:	e01b      	b.n	80038e4 <UART_SetConfig+0x1e0>
 80038ac:	231b      	movs	r3, #27
 80038ae:	2218      	movs	r2, #24
 80038b0:	189b      	adds	r3, r3, r2
 80038b2:	19db      	adds	r3, r3, r7
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e021      	b.n	80038fe <UART_SetConfig+0x1fa>
 80038ba:	231b      	movs	r3, #27
 80038bc:	2218      	movs	r2, #24
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	19db      	adds	r3, r3, r7
 80038c2:	2202      	movs	r2, #2
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e01a      	b.n	80038fe <UART_SetConfig+0x1fa>
 80038c8:	231b      	movs	r3, #27
 80038ca:	2218      	movs	r2, #24
 80038cc:	189b      	adds	r3, r3, r2
 80038ce:	19db      	adds	r3, r3, r7
 80038d0:	2204      	movs	r2, #4
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e013      	b.n	80038fe <UART_SetConfig+0x1fa>
 80038d6:	231b      	movs	r3, #27
 80038d8:	2218      	movs	r2, #24
 80038da:	189b      	adds	r3, r3, r2
 80038dc:	19db      	adds	r3, r3, r7
 80038de:	2208      	movs	r2, #8
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	e00c      	b.n	80038fe <UART_SetConfig+0x1fa>
 80038e4:	231b      	movs	r3, #27
 80038e6:	2218      	movs	r2, #24
 80038e8:	189b      	adds	r3, r3, r2
 80038ea:	19db      	adds	r3, r3, r7
 80038ec:	2210      	movs	r2, #16
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e005      	b.n	80038fe <UART_SetConfig+0x1fa>
 80038f2:	231b      	movs	r3, #27
 80038f4:	2218      	movs	r2, #24
 80038f6:	189b      	adds	r3, r3, r2
 80038f8:	19db      	adds	r3, r3, r7
 80038fa:	2210      	movs	r2, #16
 80038fc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a55      	ldr	r2, [pc, #340]	; (8003a58 <UART_SetConfig+0x354>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d000      	beq.n	800390a <UART_SetConfig+0x206>
 8003908:	e084      	b.n	8003a14 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800390a:	231b      	movs	r3, #27
 800390c:	2218      	movs	r2, #24
 800390e:	189b      	adds	r3, r3, r2
 8003910:	19db      	adds	r3, r3, r7
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d01d      	beq.n	8003954 <UART_SetConfig+0x250>
 8003918:	dc20      	bgt.n	800395c <UART_SetConfig+0x258>
 800391a:	2b04      	cmp	r3, #4
 800391c:	d015      	beq.n	800394a <UART_SetConfig+0x246>
 800391e:	dc1d      	bgt.n	800395c <UART_SetConfig+0x258>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <UART_SetConfig+0x226>
 8003924:	2b02      	cmp	r3, #2
 8003926:	d005      	beq.n	8003934 <UART_SetConfig+0x230>
 8003928:	e018      	b.n	800395c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800392a:	f7fe fd47 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 800392e:	0003      	movs	r3, r0
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003932:	e01c      	b.n	800396e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003934:	4b4b      	ldr	r3, [pc, #300]	; (8003a64 <UART_SetConfig+0x360>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2210      	movs	r2, #16
 800393a:	4013      	ands	r3, r2
 800393c:	d002      	beq.n	8003944 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800393e:	4b4b      	ldr	r3, [pc, #300]	; (8003a6c <UART_SetConfig+0x368>)
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003942:	e014      	b.n	800396e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003944:	4b4a      	ldr	r3, [pc, #296]	; (8003a70 <UART_SetConfig+0x36c>)
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003948:	e011      	b.n	800396e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394a:	f7fe fc87 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800394e:	0003      	movs	r3, r0
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003952:	e00c      	b.n	800396e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800395a:	e008      	b.n	800396e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003960:	231a      	movs	r3, #26
 8003962:	2218      	movs	r2, #24
 8003964:	189b      	adds	r3, r3, r2
 8003966:	19db      	adds	r3, r3, r7
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]
        break;
 800396c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d100      	bne.n	8003976 <UART_SetConfig+0x272>
 8003974:	e132      	b.n	8003bdc <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	0013      	movs	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	189b      	adds	r3, r3, r2
 8003980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003982:	429a      	cmp	r2, r3
 8003984:	d305      	bcc.n	8003992 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800398c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800398e:	429a      	cmp	r2, r3
 8003990:	d906      	bls.n	80039a0 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003992:	231a      	movs	r3, #26
 8003994:	2218      	movs	r2, #24
 8003996:	189b      	adds	r3, r3, r2
 8003998:	19db      	adds	r3, r3, r7
 800399a:	2201      	movs	r2, #1
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	e11d      	b.n	8003bdc <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	6939      	ldr	r1, [r7, #16]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	000b      	movs	r3, r1
 80039ae:	0e1b      	lsrs	r3, r3, #24
 80039b0:	0010      	movs	r0, r2
 80039b2:	0205      	lsls	r5, r0, #8
 80039b4:	431d      	orrs	r5, r3
 80039b6:	000b      	movs	r3, r1
 80039b8:	021c      	lsls	r4, r3, #8
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68b8      	ldr	r0, [r7, #8]
 80039c8:	68f9      	ldr	r1, [r7, #12]
 80039ca:	1900      	adds	r0, r0, r4
 80039cc:	4169      	adcs	r1, r5
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	2300      	movs	r3, #0
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f7fc fd14 	bl	8000408 <__aeabi_uldivmod>
 80039e0:	0002      	movs	r2, r0
 80039e2:	000b      	movs	r3, r1
 80039e4:	0013      	movs	r3, r2
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ea:	23c0      	movs	r3, #192	; 0xc0
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d309      	bcc.n	8003a06 <UART_SetConfig+0x302>
 80039f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	035b      	lsls	r3, r3, #13
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d204      	bcs.n	8003a06 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a02:	60da      	str	r2, [r3, #12]
 8003a04:	e0ea      	b.n	8003bdc <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8003a06:	231a      	movs	r3, #26
 8003a08:	2218      	movs	r2, #24
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	19db      	adds	r3, r3, r7
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	e0e3      	b.n	8003bdc <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d000      	beq.n	8003a22 <UART_SetConfig+0x31e>
 8003a20:	e085      	b.n	8003b2e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8003a22:	231b      	movs	r3, #27
 8003a24:	2218      	movs	r2, #24
 8003a26:	189b      	adds	r3, r3, r2
 8003a28:	19db      	adds	r3, r3, r7
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d837      	bhi.n	8003aa0 <UART_SetConfig+0x39c>
 8003a30:	009a      	lsls	r2, r3, #2
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <UART_SetConfig+0x370>)
 8003a34:	18d3      	adds	r3, r2, r3
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a3a:	f7fe fcbf 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8003a3e:	0003      	movs	r3, r0
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a42:	e036      	b.n	8003ab2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a44:	f7fe fcd0 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a4c:	e031      	b.n	8003ab2 <UART_SetConfig+0x3ae>
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	efff69f3 	.word	0xefff69f3
 8003a54:	ffffcfff 	.word	0xffffcfff
 8003a58:	40004800 	.word	0x40004800
 8003a5c:	fffff4ff 	.word	0xfffff4ff
 8003a60:	40013800 	.word	0x40013800
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40004400 	.word	0x40004400
 8003a6c:	003d0900 	.word	0x003d0900
 8003a70:	00f42400 	.word	0x00f42400
 8003a74:	080041e8 	.word	0x080041e8
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a78:	4b60      	ldr	r3, [pc, #384]	; (8003bfc <UART_SetConfig+0x4f8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d002      	beq.n	8003a88 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a82:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <UART_SetConfig+0x4fc>)
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a86:	e014      	b.n	8003ab2 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003a88:	4b5e      	ldr	r3, [pc, #376]	; (8003c04 <UART_SetConfig+0x500>)
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a8c:	e011      	b.n	8003ab2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8e:	f7fe fbe5 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8003a92:	0003      	movs	r3, r0
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a96:	e00c      	b.n	8003ab2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a9e:	e008      	b.n	8003ab2 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003aa4:	231a      	movs	r3, #26
 8003aa6:	2218      	movs	r2, #24
 8003aa8:	189b      	adds	r3, r3, r2
 8003aaa:	19db      	adds	r3, r3, r7
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]
        break;
 8003ab0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d100      	bne.n	8003aba <UART_SetConfig+0x3b6>
 8003ab8:	e090      	b.n	8003bdc <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	005a      	lsls	r2, r3, #1
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	085b      	lsrs	r3, r3, #1
 8003ac4:	18d2      	adds	r2, r2, r3
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	0019      	movs	r1, r3
 8003acc:	0010      	movs	r0, r2
 8003ace:	f7fc fb25 	bl	800011c <__udivsi3>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	2b0f      	cmp	r3, #15
 8003ada:	d921      	bls.n	8003b20 <UART_SetConfig+0x41c>
 8003adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	025b      	lsls	r3, r3, #9
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d21c      	bcs.n	8003b20 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	200e      	movs	r0, #14
 8003aec:	2418      	movs	r4, #24
 8003aee:	1903      	adds	r3, r0, r4
 8003af0:	19db      	adds	r3, r3, r7
 8003af2:	210f      	movs	r1, #15
 8003af4:	438a      	bics	r2, r1
 8003af6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2207      	movs	r2, #7
 8003b00:	4013      	ands	r3, r2
 8003b02:	b299      	uxth	r1, r3
 8003b04:	1903      	adds	r3, r0, r4
 8003b06:	19db      	adds	r3, r3, r7
 8003b08:	1902      	adds	r2, r0, r4
 8003b0a:	19d2      	adds	r2, r2, r7
 8003b0c:	8812      	ldrh	r2, [r2, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	1902      	adds	r2, r0, r4
 8003b18:	19d2      	adds	r2, r2, r7
 8003b1a:	8812      	ldrh	r2, [r2, #0]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	e05d      	b.n	8003bdc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b20:	231a      	movs	r3, #26
 8003b22:	2218      	movs	r2, #24
 8003b24:	189b      	adds	r3, r3, r2
 8003b26:	19db      	adds	r3, r3, r7
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	e056      	b.n	8003bdc <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b2e:	231b      	movs	r3, #27
 8003b30:	2218      	movs	r2, #24
 8003b32:	189b      	adds	r3, r3, r2
 8003b34:	19db      	adds	r3, r3, r7
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d822      	bhi.n	8003b82 <UART_SetConfig+0x47e>
 8003b3c:	009a      	lsls	r2, r3, #2
 8003b3e:	4b32      	ldr	r3, [pc, #200]	; (8003c08 <UART_SetConfig+0x504>)
 8003b40:	18d3      	adds	r3, r2, r3
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b46:	f7fe fc39 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b4e:	e021      	b.n	8003b94 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b50:	f7fe fc4a 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8003b54:	0003      	movs	r3, r0
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b58:	e01c      	b.n	8003b94 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b5a:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <UART_SetConfig+0x4f8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2210      	movs	r2, #16
 8003b60:	4013      	ands	r3, r2
 8003b62:	d002      	beq.n	8003b6a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b64:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <UART_SetConfig+0x4fc>)
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b68:	e014      	b.n	8003b94 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003b6a:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <UART_SetConfig+0x500>)
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b6e:	e011      	b.n	8003b94 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b70:	f7fe fb74 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8003b74:	0003      	movs	r3, r0
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b78:	e00c      	b.n	8003b94 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b80:	e008      	b.n	8003b94 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b86:	231a      	movs	r3, #26
 8003b88:	2218      	movs	r2, #24
 8003b8a:	189b      	adds	r3, r3, r2
 8003b8c:	19db      	adds	r3, r3, r7
 8003b8e:	2201      	movs	r2, #1
 8003b90:	701a      	strb	r2, [r3, #0]
        break;
 8003b92:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d020      	beq.n	8003bdc <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	085a      	lsrs	r2, r3, #1
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	18d2      	adds	r2, r2, r3
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	0019      	movs	r1, r3
 8003baa:	0010      	movs	r0, r2
 8003bac:	f7fc fab6 	bl	800011c <__udivsi3>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	2b0f      	cmp	r3, #15
 8003bb8:	d90a      	bls.n	8003bd0 <UART_SetConfig+0x4cc>
 8003bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	025b      	lsls	r3, r3, #9
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d205      	bcs.n	8003bd0 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60da      	str	r2, [r3, #12]
 8003bce:	e005      	b.n	8003bdc <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd0:	231a      	movs	r3, #26
 8003bd2:	2218      	movs	r2, #24
 8003bd4:	189b      	adds	r3, r3, r2
 8003bd6:	19db      	adds	r3, r3, r7
 8003bd8:	2201      	movs	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2200      	movs	r2, #0
 8003be0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	2200      	movs	r2, #0
 8003be6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003be8:	231a      	movs	r3, #26
 8003bea:	2218      	movs	r2, #24
 8003bec:	189b      	adds	r3, r3, r2
 8003bee:	19db      	adds	r3, r3, r7
 8003bf0:	781b      	ldrb	r3, [r3, #0]
}
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b00e      	add	sp, #56	; 0x38
 8003bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	003d0900 	.word	0x003d0900
 8003c04:	00f42400 	.word	0x00f42400
 8003c08:	0800420c 	.word	0x0800420c

08003c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d00b      	beq.n	8003c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a4a      	ldr	r2, [pc, #296]	; (8003d50 <UART_AdvFeatureConfig+0x144>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	0019      	movs	r1, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d00b      	beq.n	8003c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4a43      	ldr	r2, [pc, #268]	; (8003d54 <UART_AdvFeatureConfig+0x148>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4a3b      	ldr	r2, [pc, #236]	; (8003d58 <UART_AdvFeatureConfig+0x14c>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	2208      	movs	r2, #8
 8003c80:	4013      	ands	r3, r2
 8003c82:	d00b      	beq.n	8003c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4a34      	ldr	r2, [pc, #208]	; (8003d5c <UART_AdvFeatureConfig+0x150>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	0019      	movs	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d00b      	beq.n	8003cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a2c      	ldr	r2, [pc, #176]	; (8003d60 <UART_AdvFeatureConfig+0x154>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d00b      	beq.n	8003ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4a25      	ldr	r2, [pc, #148]	; (8003d64 <UART_AdvFeatureConfig+0x158>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	2240      	movs	r2, #64	; 0x40
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d01d      	beq.n	8003d26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <UART_AdvFeatureConfig+0x15c>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	0019      	movs	r1, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d06:	2380      	movs	r3, #128	; 0x80
 8003d08:	035b      	lsls	r3, r3, #13
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d10b      	bne.n	8003d26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <UART_AdvFeatureConfig+0x160>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	2280      	movs	r2, #128	; 0x80
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a0e      	ldr	r2, [pc, #56]	; (8003d70 <UART_AdvFeatureConfig+0x164>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
  }
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b002      	add	sp, #8
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	fffdffff 	.word	0xfffdffff
 8003d54:	fffeffff 	.word	0xfffeffff
 8003d58:	fffbffff 	.word	0xfffbffff
 8003d5c:	ffff7fff 	.word	0xffff7fff
 8003d60:	ffffefff 	.word	0xffffefff
 8003d64:	ffffdfff 	.word	0xffffdfff
 8003d68:	ffefffff 	.word	0xffefffff
 8003d6c:	ff9fffff 	.word	0xff9fffff
 8003d70:	fff7ffff 	.word	0xfff7ffff

08003d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b092      	sub	sp, #72	; 0x48
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2284      	movs	r2, #132	; 0x84
 8003d80:	2100      	movs	r1, #0
 8003d82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d84:	f7fd fa00 	bl	8001188 <HAL_GetTick>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2208      	movs	r2, #8
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d12c      	bne.n	8003df4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9c:	2280      	movs	r2, #128	; 0x80
 8003d9e:	0391      	lsls	r1, r2, #14
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	4a46      	ldr	r2, [pc, #280]	; (8003ebc <UART_CheckIdleState+0x148>)
 8003da4:	9200      	str	r2, [sp, #0]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f000 f88c 	bl	8003ec4 <UART_WaitOnFlagUntilTimeout>
 8003dac:	1e03      	subs	r3, r0, #0
 8003dae:	d021      	beq.n	8003df4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db0:	f3ef 8310 	mrs	r3, PRIMASK
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dba:	2301      	movs	r3, #1
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	f383 8810 	msr	PRIMASK, r3
}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2180      	movs	r1, #128	; 0x80
 8003dd2:	438a      	bics	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	f383 8810 	msr	PRIMASK, r3
}
 8003de0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2278      	movs	r2, #120	; 0x78
 8003dec:	2100      	movs	r1, #0
 8003dee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e05f      	b.n	8003eb4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d146      	bne.n	8003e90 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e04:	2280      	movs	r2, #128	; 0x80
 8003e06:	03d1      	lsls	r1, r2, #15
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <UART_CheckIdleState+0x148>)
 8003e0c:	9200      	str	r2, [sp, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f000 f858 	bl	8003ec4 <UART_WaitOnFlagUntilTimeout>
 8003e14:	1e03      	subs	r3, r0, #0
 8003e16:	d03b      	beq.n	8003e90 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e18:	f3ef 8310 	mrs	r3, PRIMASK
 8003e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
 8003e22:	2301      	movs	r3, #1
 8003e24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f383 8810 	msr	PRIMASK, r3
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4921      	ldr	r1, [pc, #132]	; (8003ec0 <UART_CheckIdleState+0x14c>)
 8003e3a:	400a      	ands	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f383 8810 	msr	PRIMASK, r3
}
 8003e48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e50:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	633b      	str	r3, [r7, #48]	; 0x30
 8003e54:	2301      	movs	r3, #1
 8003e56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f383 8810 	msr	PRIMASK, r3
}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	438a      	bics	r2, r1
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	f383 8810 	msr	PRIMASK, r3
}
 8003e7a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2280      	movs	r2, #128	; 0x80
 8003e80:	2120      	movs	r1, #32
 8003e82:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2278      	movs	r2, #120	; 0x78
 8003e88:	2100      	movs	r1, #0
 8003e8a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e011      	b.n	8003eb4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2280      	movs	r2, #128	; 0x80
 8003e9a:	2120      	movs	r1, #32
 8003e9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2278      	movs	r2, #120	; 0x78
 8003eae:	2100      	movs	r1, #0
 8003eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	b010      	add	sp, #64	; 0x40
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	01ffffff 	.word	0x01ffffff
 8003ec0:	fffffedf 	.word	0xfffffedf

08003ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	1dfb      	adds	r3, r7, #7
 8003ed2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed4:	e04b      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	d048      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003edc:	f7fd f954 	bl	8001188 <HAL_GetTick>
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d302      	bcc.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e04b      	b.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2204      	movs	r2, #4
 8003efe:	4013      	ands	r3, r2
 8003f00:	d035      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	2208      	movs	r2, #8
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d111      	bne.n	8003f34 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2208      	movs	r2, #8
 8003f16:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f000 f83c 	bl	8003f98 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2284      	movs	r2, #132	; 0x84
 8003f24:	2108      	movs	r1, #8
 8003f26:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2278      	movs	r2, #120	; 0x78
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e02c      	b.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	401a      	ands	r2, r3
 8003f40:	2380      	movs	r3, #128	; 0x80
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d112      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2280      	movs	r2, #128	; 0x80
 8003f4e:	0112      	lsls	r2, r2, #4
 8003f50:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f000 f81f 	bl	8003f98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2284      	movs	r2, #132	; 0x84
 8003f5e:	2120      	movs	r1, #32
 8003f60:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2278      	movs	r2, #120	; 0x78
 8003f66:	2100      	movs	r1, #0
 8003f68:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e00f      	b.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	425a      	negs	r2, r3
 8003f7e:	4153      	adcs	r3, r2
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	001a      	movs	r2, r3
 8003f84:	1dfb      	adds	r3, r7, #7
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d0a4      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	0018      	movs	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b004      	add	sp, #16
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08e      	sub	sp, #56	; 0x38
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa4:	617b      	str	r3, [r7, #20]
  return(result);
 8003fa6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8003faa:	2301      	movs	r3, #1
 8003fac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f383 8810 	msr	PRIMASK, r3
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4926      	ldr	r1, [pc, #152]	; (800405c <UART_EndRxTransfer+0xc4>)
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f383 8810 	msr	PRIMASK, r3
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd6:	623b      	str	r3, [r7, #32]
  return(result);
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	633b      	str	r3, [r7, #48]	; 0x30
 8003fdc:	2301      	movs	r3, #1
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	f383 8810 	msr	PRIMASK, r3
}
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	438a      	bics	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	f383 8810 	msr	PRIMASK, r3
}
 8004002:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004008:	2b01      	cmp	r3, #1
 800400a:	d118      	bne.n	800403e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400c:	f3ef 8310 	mrs	r3, PRIMASK
 8004010:	60bb      	str	r3, [r7, #8]
  return(result);
 8004012:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004016:	2301      	movs	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f383 8810 	msr	PRIMASK, r3
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2110      	movs	r1, #16
 800402e:	438a      	bics	r2, r1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f383 8810 	msr	PRIMASK, r3
}
 800403c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2280      	movs	r2, #128	; 0x80
 8004042:	2120      	movs	r1, #32
 8004044:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b00e      	add	sp, #56	; 0x38
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	fffffedf 	.word	0xfffffedf

08004060 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	225a      	movs	r2, #90	; 0x5a
 8004072:	2100      	movs	r1, #0
 8004074:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2252      	movs	r2, #82	; 0x52
 800407a:	2100      	movs	r1, #0
 800407c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	0018      	movs	r0, r3
 8004082:	f7ff fb2b 	bl	80036dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b004      	add	sp, #16
 800408c:	bd80      	pop	{r7, pc}

0800408e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004096:	f3ef 8310 	mrs	r3, PRIMASK
 800409a:	60bb      	str	r3, [r7, #8]
  return(result);
 800409c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	2301      	movs	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f383 8810 	msr	PRIMASK, r3
}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2140      	movs	r1, #64	; 0x40
 80040b8:	438a      	bics	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f383 8810 	msr	PRIMASK, r3
}
 80040c6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7ff faf8 	bl	80036cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040dc:	46c0      	nop			; (mov r8, r8)
 80040de:	46bd      	mov	sp, r7
 80040e0:	b006      	add	sp, #24
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b002      	add	sp, #8
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <memset>:
 80040f4:	0003      	movs	r3, r0
 80040f6:	1882      	adds	r2, r0, r2
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d100      	bne.n	80040fe <memset+0xa>
 80040fc:	4770      	bx	lr
 80040fe:	7019      	strb	r1, [r3, #0]
 8004100:	3301      	adds	r3, #1
 8004102:	e7f9      	b.n	80040f8 <memset+0x4>

08004104 <__libc_init_array>:
 8004104:	b570      	push	{r4, r5, r6, lr}
 8004106:	2600      	movs	r6, #0
 8004108:	4c0c      	ldr	r4, [pc, #48]	; (800413c <__libc_init_array+0x38>)
 800410a:	4d0d      	ldr	r5, [pc, #52]	; (8004140 <__libc_init_array+0x3c>)
 800410c:	1b64      	subs	r4, r4, r5
 800410e:	10a4      	asrs	r4, r4, #2
 8004110:	42a6      	cmp	r6, r4
 8004112:	d109      	bne.n	8004128 <__libc_init_array+0x24>
 8004114:	2600      	movs	r6, #0
 8004116:	f000 f819 	bl	800414c <_init>
 800411a:	4c0a      	ldr	r4, [pc, #40]	; (8004144 <__libc_init_array+0x40>)
 800411c:	4d0a      	ldr	r5, [pc, #40]	; (8004148 <__libc_init_array+0x44>)
 800411e:	1b64      	subs	r4, r4, r5
 8004120:	10a4      	asrs	r4, r4, #2
 8004122:	42a6      	cmp	r6, r4
 8004124:	d105      	bne.n	8004132 <__libc_init_array+0x2e>
 8004126:	bd70      	pop	{r4, r5, r6, pc}
 8004128:	00b3      	lsls	r3, r6, #2
 800412a:	58eb      	ldr	r3, [r5, r3]
 800412c:	4798      	blx	r3
 800412e:	3601      	adds	r6, #1
 8004130:	e7ee      	b.n	8004110 <__libc_init_array+0xc>
 8004132:	00b3      	lsls	r3, r6, #2
 8004134:	58eb      	ldr	r3, [r5, r3]
 8004136:	4798      	blx	r3
 8004138:	3601      	adds	r6, #1
 800413a:	e7f2      	b.n	8004122 <__libc_init_array+0x1e>
 800413c:	08004238 	.word	0x08004238
 8004140:	08004238 	.word	0x08004238
 8004144:	0800423c 	.word	0x0800423c
 8004148:	08004238 	.word	0x08004238

0800414c <_init>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004152:	bc08      	pop	{r3}
 8004154:	469e      	mov	lr, r3
 8004156:	4770      	bx	lr

08004158 <_fini>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	469e      	mov	lr, r3
 8004162:	4770      	bx	lr
